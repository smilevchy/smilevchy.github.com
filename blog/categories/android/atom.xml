<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Android | smilevchy's blog]]></title>
  <link href="http://smilevchy.github.io/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://smilevchy.github.io/"/>
  <updated>2018-04-18T23:51:13+08:00</updated>
  <id>http://smilevchy.github.io/</id>
  <author>
    <name><![CDATA[smilevchy]]></name>
    <email><![CDATA[smilevchy@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android Performance Optimization]]></title>
    <link href="http://smilevchy.github.io/blog/2015/10/06/android-performance-optimization/"/>
    <updated>2015-10-06T10:05:16+08:00</updated>
    <id>http://smilevchy.github.io/blog/2015/10/06/android-performance-optimization</id>
    <content type="html"><![CDATA[<p><em>Collections of all kinds of tricks of optimizing app performance.</em></p>

<!-- more -->


<p>Memory Performance Tools:</p>

<ul>
<li>Memory Monitor：查看整个app所占用的内存，以及发生GC的时刻，短时间内发生大量的GC操作是一个危险的信号</li>
<li>Allocation Tracker：使用此工具来追踪内存的分配，</li>
<li>Heap Tool：查看当前内存快照，便于对比分析哪些对象有可能是泄漏了的</li>
</ul>


<hr />

<p>Overall Performance Tools:</p>

<ul>
<li>Lint Tool</li>
<li>Strict Mode Tool</li>
</ul>


<hr />

<p>The Performance Lifecyle</p>

<ul>
<li><p>Gather：收集数据</p>

<ul>
<li>我们可以通过Android SDK里面提供的诸多工具来收集CPU、GPU、内存、电量等性能数据。</li>
</ul>
</li>
<li><p>Insight：分析数据</p>

<ul>
<li>通过上面的步骤，我们获取到了大量的数据，下一步就是分析这些数据。工具帮我们生成了很多可读性强的表格，我们需要事先了解如何查看表格的数据，每一项代表的含义，这样才能够快速定位问题。如果分析数据之后还是没有找到问题，那么就只能不停的重新收集数据，再进行分析，如此循环。</li>
</ul>
</li>
<li><p>Action：解决问题</p>

<ul>
<li>定位到问题之后，我们需要采取行动来解决问题。解决问题之前一定要先有个计划，评估这个解决方案是否可行，是否能够及时的解决问题。</li>
</ul>
</li>
</ul>


<hr />

<p>Ui Layer</p>

<ul>
<li><p>优化布局文件</p>

<ul>
<li><p>tools: hierarchy viewer</p></li>
<li><p>减少布局层次，保持层次扁平化</p></li>
<li>删除不必要的组件</li>
</ul>
</li>
<li><p>查看 GPU 过度渲染</p>

<ul>
<li><p>tools: gpu overdraw display</p></li>
<li><p>利用 cliprect</p></li>
<li>取消设置背景

<ul>
<li>移除Window默认的Background(每个 Activity 调用 setBackgroundDrawable(null))</li>
<li>移除XML布局文件中非必需的Background</li>
<li>按需显示占位背景图片</li>
</ul>
</li>
</ul>
</li>
<li><p>GPU 显示配置文件</p>

<ul>
<li>查看 GPU 绘制图形时是否有异样（如界面某个组件一直在循环绘制）</li>
</ul>
</li>
<li><p>使用 GPU 渲染 View</p></li>
<li><p>自定义 View 覆盖 hasOverlappingRendering() 并返回 false</p></li>
<li><p>Avoiding allocations in onDraw()</p>

<ul>
<li>把分配对象操作移到 onDraw() 方法外面</li>
</ul>
</li>
<li><p>Custom View</p>

<ul>
<li>Useless calls to onDraw() : 第1个是仅仅在View的内容发生改变的时候才去触发invalidate方法，第2个是尽量使用ClipRect等方法来提高绘制的性能</li>
<li>Useless pixels : 减少绘制时不必要的绘制元素，对于那些不可见的元素，我们需要尽量避免重绘</li>
<li>Wasted CPU cycles : 对于不在屏幕上的元素，可以使用Canvas.quickReject把他们给剔除，避免浪费CPU资源。另外尽量使用GPU来进行UI的渲染，这样能够极大的提高程序的整体表现性能</li>
</ul>
</li>
<li><p>Smaller Pixel Formats</p></li>
<li><p>Pre-scaling Bitmaps</p>

<ul>
<li>避免直接调用createScaledBitmap()，应该通过设置 bitmapOption 的 inSampleSize 来进行缩放图像</li>
</ul>
</li>
<li><p>Re-using Bitmaps</p>

<ul>
<li>使用 inBitmap 属性</li>
</ul>
</li>
</ul>


<hr />

<p>Memory Layer</p>

<ul>
<li><p>避免 GC 操作过于频繁</p>

<ul>
<li><p>tools: Memory Monitor / Heap and Allocation Tracker</p></li>
<li><p>reason 1: memory churn</p></li>
<li>reason 2: 瞬间产生大量的对象占用了内存区域，导致各种类型的 GC</li>
</ul>
</li>
<li><p>避免 Memory Leak</p>

<ul>
<li><p>tools: Heap tool / Allocation Track</p></li>
<li><p>method of checking leak: observed activity(use heap tool to capture current memory state) &ndash;> blank activity(call gc() actively , then use heap tool to capture current memory state, now it should not have previous activity&rsquo;s memory footprint. If not, then leak&hellip;)</p></li>
<li><p>method of finding leaked memory footprint: blank activity(use tool of Allocation Track , begin track) &ndash;> observed activity &ndash;> blank activity(end track, then find the objects still alive)</p></li>
<li><p>do not leak views</p>

<ul>
<li>beware callbacks(only if callback uses some context related objects)</li>
<li>beware static objects</li>
</ul>
</li>
</ul>
</li>
<li><p>使用 Object Pools</p></li>
<li>使用 LRU Cache</li>
</ul>


<hr />

<p>Battery Layer</p>

<ul>
<li><p>tools: Battery Historian Tool / JobScheduler API (since level 20)</p></li>
<li><p>我们应该尽量减少唤醒屏幕的次数与持续的时间，使用WakeLock来处理唤醒的问题，能够正确执行唤醒操作并根据设定及时关闭操作进入睡眠状态</p></li>
<li>某些非必须马上执行的操作，例如上传歌曲，图片处理等，可以等到设备处于充电状态或者电量充足的时候才进行</li>
<li>触发网络请求的操作，每次都会保持无线信号持续一段时间，我们可以把零散的网络请求打包进行一次操作，避免过多的无线信号引起的电量消耗</li>
</ul>


<hr />

<p>Network Layer</p>

<ul>
<li>Batch and delay HTTP requests

<ul>
<li>tools: JobScheduler API</li>
</ul>
</li>
<li>Prefetch and Compressed</li>
</ul>


<hr />

<p>Bussiness Layer</p>

<ul>
<li>Batching Background Work Until Later

<ul>
<li>AlarmManager：使用AlarmManager设置定时任务，可以选择精确的间隔时间，也可以选择非精确时间作为参数。除非程序有很强烈的需要使用精确的定时唤醒，否者一定要避免使用他，我们应该尽量使用非精确的方式</li>
<li>SyncAdapter：我们可以使用SyncAdapter为应用添加设置账户，这样在手机设置的账户列表里面可以找到我们的应用</li>
<li>JobSchedulor：这是最简单高效的方法，我们可以设置任务延迟的间隔，执行条件，还可以增加重试机制</li>
</ul>
</li>
</ul>


<hr />

<p>Code Layer</p>

<ul>
<li><p>基于场景选择合适的数据结构</p>

<ul>
<li> 尝试使用官方提供的数据结构(ArrayMap, SparseArray等)</li>
<li> 判断是否使用 enum</li>
</ul>
</li>
<li><p>colors.xml 不要采用业务来命名,直接使用颜色命名</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Something About Inflation]]></title>
    <link href="http://smilevchy.github.io/blog/2015/10/05/something-about-inflation/"/>
    <updated>2015-10-05T22:41:19+08:00</updated>
    <id>http://smilevchy.github.io/blog/2015/10/05/something-about-inflation</id>
    <content type="html"><![CDATA[<p>When using view inflation, there are something we should know.</p>

<!-- more -->


<p>How to inflate a view? Usually by calling&hellip;</p>

<ul>
<li>View#inflate(Context context, int resource, ViewGroup root)</li>
<li>LayoutInflater#inflate(int resource, ViewGroup root)</li>
<li>LayoutInflater#inflate(int resource, ViewGroup root, boolean attachToRoot)</li>
</ul>


<p>Calling is simple. The problem is <em>which one should you call and what arguments should you pass</em>.</p>

<p>To solve these questions, the key is to <em>take insight in the method signature and dive into the source code</em>.</p>

<p>Taking a brief example here:</p>

<pre><code>// A view which presents container
ViewGroup parent = (ViewGroup) findViewById(R.id.container);

// result: layout_height = wrap_content, layout_width = match_parent
view = LayoutInflater.from(this).inflate(R.layout.item, null);
parent.addView(view);

// result: layout_height = 100, layout_width = 100
view = LayoutInflater.from(this).inflate(R.layout.item, null);
parent.addView(view, 100, 100);

// result: layout_height = 25dp, layout_width = 25dp
// returned view is the root view of R.layout.item due to attachRoot = false
view = LayoutInflater.from(this).inflate(R.layout.item, parent, false);
parent.addView(view);

// result: layout_height = 25dp, layout_width = 25dp 
// parent.addView is not necessary as this is already done by attachRoot = true
// returned view is parent due to parent supplied as hierarchy root and attachRoot = true
view = LayoutInflater.from(this).inflate(R.layout.red, parent, true);
</code></pre>

<p>Above code explains the results of different methods.</p>

<p><a href="https://possiblemobile.com/2013/05/layout-inflation-as-intended/">Here is another useful resource</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Something About Installing Genymotion]]></title>
    <link href="http://smilevchy.github.io/blog/2014/12/28/something-about-installing-genymotion/"/>
    <updated>2014-12-28T16:21:48+08:00</updated>
    <id>http://smilevchy.github.io/blog/2014/12/28/something-about-installing-genymotion</id>
    <content type="html"><![CDATA[<p>趁着有时间安装了 Genymotion，它需要依据 Oracle 的 VirtualBox 来工作，所以就是说你还需要安装 Oracle VM VirtualBox 这个软件。</p>

<p>一般设计上来说，Genymotion 应该要提供一个位置来设置指向 VirtualBox 软件路径的，可是找了它的安装目录、软件界面设置都没有发现这个位置，所以就是说，它可能是固定指向 VirtualBox 的。</p>

<p>即，需要按照它给定的固定路径来安装 VirtualBox ，不然就无法启动成功。至于那个固定路径是什么，可以去它的日志文件里查找，如果没什么改变的话，位置一般是在用户数据文件夹里，名字为 genymotion.log。通过查看它的错误日志，找到指向 VirtualBox 时发生错误的日志记录，那里就有写该固定路径。</p>

<p>这是我自己遇到的错误，因为在安装 Genymotion 前我就一直使用 VirtualBox ，而且是自定义路径。 &ndash;_-所以需要卸载重装，安装它的固定路径。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Interrogation of AsyncTask]]></title>
    <link href="http://smilevchy.github.io/blog/2014/12/11/interrogation-of-asynctask/"/>
    <updated>2014-12-11T20:48:12+08:00</updated>
    <id>http://smilevchy.github.io/blog/2014/12/11/interrogation-of-asynctask</id>
    <content type="html"><![CDATA[<p>当需要进行一项耗时久的任务时（下载文件、访问网络等），一般都知道必须在 worker thread 中进行。但是在现实场景中不可能单纯新建一个线程那么简单，大部分时候需要和 main thread 进行交互、或者说还要保证任务能够成功进行，不会遇到被销毁的情况。可是，单纯的 thread 并不具备这些能力。</p>

<p>那怎么办呢？</p>

<!-- more -->


<p>以上说的场景交互在 Android 开发中形成了一种 pattern，而 Android 团队就把这种 pattern 提取成了一个工具类出来给开发者使用，即 AsyncTask。</p>

<p>关于 AsyncTask 的使用方法可参见<a href="http://developer.android.com/reference/android/os/AsyncTask.html">官方文档</a>。</p>

<p>一般情况下，AsyncTask 的确就是那么容易使用。但在某些情况下，你会发现这个类出问题了。</p>

<p>这个是因为 AsyncTask 的本质缺陷导致。</p>

<p>Android 的基本组件 Activity/Receiver/Service 本身具有一定的生命周期管理（Life Circle Management），而 AsyncTask 并不具备与之对应的生命周期管理。</p>

<p>假设一个场景如下，你编写了一个 AsyncTask，然后在一个 Activity 里调用该 AsyncTask，并且把自身引用传递进去，为了后续的一些函数调用。大部分情况下是没有问题，但是当设备转换屏幕方向时，Android 系统会销毁这个 Activity 再重建一个新的，此时之前传进去 AsyncTask 里的引用已经“无效”了，因为它指向了一个被销毁的 Activity，你再也不可能对其做任何 UI 操作，甚至会抛出 NullPointerException。即是说，你需要注意传进给 AsyncTask 的任何具有生命周期管理的引用，下一秒这个引用可能就失效了。</p>

<p>解决方法？</p>

<p>对于此类具有生命周期管理的引用统一使用 WeakReference，当引用指向的对象被系统销毁时，可以让这些对象被 GC 处理，同时在使用到引用的代码处再判断是否非空来决定怎么处理。</p>

<p>此外，当外部发生生命周期状态改变时（按返回键、Home键、取消进度框等），若对应的 AsyncTask 需要做相应的反应时（取消任务进行、继续任务进行等），还需要监听外部的生命周期状态改变事件。</p>

<p>总之，AsyncTask 看起来很简单，但需要在实际场景中考虑是否可能会出现问题。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My First Game - CatRush]]></title>
    <link href="http://smilevchy.github.io/blog/2014/12/08/my-first-game-catrush/"/>
    <updated>2014-12-08T22:15:23+08:00</updated>
    <id>http://smilevchy.github.io/blog/2014/12/08/my-first-game-catrush</id>
    <content type="html"><![CDATA[<p>完成了第一个移动端游戏，其为 CatRush。</p>

<!-- more -->


<hr />

<p>展示如下所示(当当当~当):</p>

<p>首先是图标:</p>

<p><img src="/images/artifacts/catrush/icon.png" alt="图标" /></p>

<p>接下来是 &ldquo;启动画面&rdquo; (专业术语为 SplashScreen):</p>

<p><img src="/images/artifacts/catrush/splash_scene_1.png" alt="启动画面1" />
<img src="/images/artifacts/catrush/splash_scene_2.png" alt="启动画面2" />
<img src="/images/artifacts/catrush/splash_scene_3.png" alt="启动画面3" /></p>

<p>启动画面是一项很重要的元素。它可以做为一个公司或者个人的标识。通过持久的运营，让它变成一个品牌。让大家一看到这个标识就知道是哪个公司或者个人的作品。比如说漫威电影的开头都会有一段短动画，或者美国好莱坞的某个电影公司开头都会有一段闪电打雷开车在高速路上的动画。</p>

<p>启动画面后是 &ldquo;主菜单&rdquo; 画面:
<img src="/images/artifacts/catrush/main_menu_scene.png" alt="主菜单" /></p>

<p>&ldquo;关于&rdquo; 界面:
<img src="/images/artifacts/catrush/about_scene.png" alt="关于界面" /></p>

<p>&ldquo;选项&rdquo; 界面:
<img src="/images/artifacts/catrush/option_scene.png" alt="选项界面" /></p>

<p>&ldquo;分数记录&rdquo; 界面:
<img src="/images/artifacts/catrush/score_scene.png" alt="分数记录界面" />
这里触摸右下的小黑猫可以截屏分享当前最高分数至社交软件。</p>

<p>最后是 &ldquo;游戏界面&rdquo;
<img src="/images/artifacts/catrush/game_scene.png" alt="游戏界面" />
右边两只小黑爪一只是加速，一只是减速。</p>

<p>没错，你要做的就是控制小黑猫的速度，躲避天上掉下来的毛线团和秋刀鱼。</p>

<p>游戏中的音乐/音效资源均是采用别人的(不进行商业化就不会侵权了吧)，有<a href="http://zh.wikipedia.org/zh/%E5%B9%BB%E5%8C%96%E6%88%90%E9%A3%8E">幻化成风</a> 和<a href="http://zh.wikipedia.org/zh/%E5%8B%87%E6%B0%A3100%25">勇气100%</a>。</p>

<p>图片资源大部分是上网找的，有些是自己画的(没错，看起来是幼稚园水平的就是本人画的)。</p>

<hr />

<p>smilevchy: 关于本游戏正式介绍完毕。</p>

<p>猫老师: 喂!貌似你介绍的很简短啊!</p>

<p>smilevchy: Haha&hellip;&hellip;本人是一名程序员啊，对于游戏策划、数值设计、图片制作、音效/音乐制作目前还都是 HelloWorld 水平啊，请老师再给我点时间，让我好好历练一下吧。</p>

<p>猫老师: Soga！少年，请继续努力吧！</p>

<p>smilevchy: 好的! 猫老师。</p>

<p>猫老师: 对了，最后再问个问题。为什么猫要躲避毛线团和秋刀鱼啊，混蛋，吾等猫君可是很喜欢毛线团和秋刀鱼的喵。</p>

<p>smilevchy: 嘿嘿嘿，猫老师，这又是另一个故事了&hellip;&hellip;</p>
]]></content>
  </entry>
  
</feed>
