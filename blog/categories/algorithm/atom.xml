<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Algorithm | smilevchy's blog]]></title>
  <link href="http://smilevchy.github.io/blog/categories/algorithm/atom.xml" rel="self"/>
  <link href="http://smilevchy.github.io/"/>
  <updated>2014-11-19T17:55:59+08:00</updated>
  <id>http://smilevchy.github.io/</id>
  <author>
    <name><![CDATA[smilevchy]]></name>
    <email><![CDATA[smilevchy@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Leetcode_Remove Nth Node From End of List]]></title>
    <link href="http://smilevchy.github.io/blog/2014/11/19/leetcode-remove-nth-node-from-end-of-list/"/>
    <updated>2014-11-19T17:55:05+08:00</updated>
    <id>http://smilevchy.github.io/blog/2014/11/19/leetcode-remove-nth-node-from-end-of-list</id>
    <content type="html"><![CDATA[<p>原题链接: <a href="https://oj.leetcode.com/problems/remove-nth-node-from-end-of-list/">https://oj.leetcode.com/problems/remove-nth-node-from-end-of-list/</a></p>

<!-- more -->


<pre><code>public ListNode removeNthFromEnd(ListNode head, int n) {
    if (head == null) return null;
    if (n == 0) return head;

    ListNode cursor = head;
    int size = 0;

    while (cursor != null) {
        cursor = cursor.next;
        size++;
    }

    cursor = head;
    int targetIndex = size - n;
    int cursorIndex = 0;
    ListNode prevNode = null;

    while (cursorIndex &lt; targetIndex) {
        prevNode = cursor;
        cursor = cursor.next;
        cursorIndex++;
    }

    if (prevNode == null) {
        head = cursor.next;
    } else {
        prevNode.next = cursor.next;
    }

    return head;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Leetcode_Merge Sorted Array]]></title>
    <link href="http://smilevchy.github.io/blog/2014/11/19/leetcode-merge-sorted-array/"/>
    <updated>2014-11-19T17:00:17+08:00</updated>
    <id>http://smilevchy.github.io/blog/2014/11/19/leetcode-merge-sorted-array</id>
    <content type="html"><![CDATA[<p>原题链接: <a href="https://oj.leetcode.com/problems/merge-sorted-array/">https://oj.leetcode.com/problems/merge-sorted-array/</a></p>

<!-- more -->


<pre><code>public void merge(int A[], int m, int B[], int n) {
    int size = m + n;
    int[] workspace = new int[size];

    int i = 0;
    int j = 0;
    int k = 0;

    while (i &lt; m &amp;&amp; j &lt; n) {
        if (A[i] &lt; B[j]) {
            workspace[k++] = A[i++];
        } else {
            workspace[k++] = B[j++];
        }
    }

    while (i &lt; m) {
        workspace[k++] = A[i++];
    }

    while (j &lt; n) {
        workspace[k++] = B[j++];
    }

    for (k = 0; k &lt; size; k++) {
        A[k] = workspace[k];
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Leetcode_Binary Tree Level Order Traversal II]]></title>
    <link href="http://smilevchy.github.io/blog/2014/11/19/leetcode-binary-tree-level-order-traversal-ii/"/>
    <updated>2014-11-19T15:46:19+08:00</updated>
    <id>http://smilevchy.github.io/blog/2014/11/19/leetcode-binary-tree-level-order-traversal-ii</id>
    <content type="html"><![CDATA[<p>原题链接: <a href="https://oj.leetcode.com/problems/binary-tree-level-order-traversal-ii/">https://oj.leetcode.com/problems/binary-tree-level-order-traversal-ii/</a></p>

<!-- more -->


<pre><code>public List&lt;List&lt;Integer&gt;&gt; levelOrderBottom(TreeNode root) {
    LinkedList&lt;List&lt;Integer&gt;&gt; result = new LinkedList&lt;List&lt;Integer&gt;&gt;();

    if (root == null) return result;

    ArrayDeque&lt;TreeNode&gt; queue = new ArrayDeque&lt;TreeNode&gt;();

    queue.offer(root);

    int lastNum = 1;
    int curNum = 0;
    List&lt;Integer&gt; row = new LinkedList&lt;Integer&gt;();

    while (!queue.isEmpty()) {
        lastNum--;

        TreeNode node = queue.poll();
        row.add(node.val);

        if (node.left != null) {
            curNum++;
            queue.offer(node.left);
        }

        if (node.right != null) {
            curNum++;
            queue.offer(node.right);
        }

        if (lastNum == 0) {
            result.addFirst(row);

            lastNum = curNum;
            curNum = 0;
            row = new LinkedList&lt;Integer&gt;();
        }
    }

    return result;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Leetcode_Binary Tree Level Order Traversal]]></title>
    <link href="http://smilevchy.github.io/blog/2014/11/19/leetcode-binary-tree-level-order-traversal/"/>
    <updated>2014-11-19T15:22:05+08:00</updated>
    <id>http://smilevchy.github.io/blog/2014/11/19/leetcode-binary-tree-level-order-traversal</id>
    <content type="html"><![CDATA[<p>原题链接: <a href="https://oj.leetcode.com/problems/binary-tree-level-order-traversal/">https://oj.leetcode.com/problems/binary-tree-level-order-traversal/</a></p>

<!-- more -->


<pre><code>public List&lt;List&lt;Integer&gt;&gt; levelOrder(TreeNode root) {
    if (root == null) return new ArrayList&lt;List&lt;Integer&gt;&gt;();

    List&lt;List&lt;Integer&gt;&gt; result = new ArrayList&lt;List&lt;Integer&gt;&gt;();
    List&lt;Integer&gt; row = new ArrayList&lt;Integer&gt;();

    row.add(root.val);
    result.add(row);

    row = new ArrayList&lt;Integer&gt;();

    List&lt;List&lt;Integer&gt;&gt; leftList = null;
    if (root.left != null) {
        row.add(root.left.val);
        leftList = levelOrder(root.left);
    }

    List&lt;List&lt;Integer&gt;&gt; rightList = null;
    if (root.right != null) {
        row.add(root.right.val);
        rightList = levelOrder(root.right);
    }

    if (row.size() &gt; 0) {
        result.add(row);
    }

    if (leftList != null) {
        leftList = leftList.subList(1, leftList.size());
    }

    if (rightList != null) {
        rightList = rightList.subList(1, rightList.size());
    }

    int i = 0;
    int leftSize = leftList != null ? leftList.size() : 0;
    int rightSize = rightList != null ? rightList.size() : 0;

    for (; i &lt; leftSize; i++) {
        row = new ArrayList&lt;Integer&gt;();

        row.addAll(leftList.get(i));
        if (i &lt; rightSize) row.addAll(rightList.get(i)); 

        result.add(row);
    }
    for (; i &lt; rightSize; i++) {
        row = new ArrayList&lt;Integer&gt;();

        row.addAll(rightList.get(i));

        result.add(row);
    }

    return result;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Leetcode_Balanced Binary Tree]]></title>
    <link href="http://smilevchy.github.io/blog/2014/11/18/leetcode-balanced-binary-tree/"/>
    <updated>2014-11-18T11:36:33+08:00</updated>
    <id>http://smilevchy.github.io/blog/2014/11/18/leetcode-balanced-binary-tree</id>
    <content type="html"><![CDATA[<p>原题链接: <a href="https://oj.leetcode.com/problems/balanced-binary-tree/">https://oj.leetcode.com/problems/balanced-binary-tree/</a></p>

<!-- more -->


<pre><code>public boolean isBalanced(TreeNode root) {
    if (root == null) return true;

    int left = maxDepth(root.left);
    int right = maxDepth(root.right);

    if (Math.abs(left - right) &gt; 1) {
        return false;
    }

    return isBalanced(root.left) &amp;&amp; isBalanced(root.right);
}

public int maxDepth(TreeNode root) {
    if (root == null) return 0;

    if (root.left == null &amp;&amp; root.right == null) {
        return 1;
    }

    return Math.max(maxDepth(root.left), maxDepth(root.right)) + 1;
}
</code></pre>
]]></content>
  </entry>
  
</feed>
