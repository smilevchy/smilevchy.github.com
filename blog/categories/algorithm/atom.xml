<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Algorithm | smilevchy's blog]]></title>
  <link href="http://smilevchy.github.io/blog/categories/algorithm/atom.xml" rel="self"/>
  <link href="http://smilevchy.github.io/"/>
  <updated>2018-06-06T23:37:56+08:00</updated>
  <id>http://smilevchy.github.io/</id>
  <author>
    <name><![CDATA[smilevchy]]></name>
    <email><![CDATA[smilevchy@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Best Time to Buy and Sell Stock]]></title>
    <link href="http://smilevchy.github.io/blog/2015/01/19/best-time-to-buy-and-sell-stock/"/>
    <updated>2015-01-19T14:12:40+08:00</updated>
    <id>http://smilevchy.github.io/blog/2015/01/19/best-time-to-buy-and-sell-stock</id>
    <content type="html"><![CDATA[<p>原题链接: <a href="https://oj.leetcode.com/problems/best-time-to-buy-and-sell-stock/">https://oj.leetcode.com/problems/best-time-to-buy-and-sell-stock/</a></p>

<!-- more -->


<pre><code>public int maxProfit(int[] prices) {
    if (prices == null || prices.length == 0) return 0;

    int local = 0;
    int global = 0;
    for (int i = 1, len = prices.length; i &lt; len; i++) {
        local = Math.max(local + prices[i] - prices[i - 1], 0);
        global = Math.max(local, global);
    }

    return global;
}

// brute force (time limit exceed)
public int maxProfit(int[] prices) {
    if (prices == null || prices.length == 0) return 0;

    int maxProfit = 0;
    int localProfit = 0;
    for (int i = 0, len = prices.length; i &lt; len - 1; i++) {
        int max = 0;
        for (int j = i + 1; j &lt; len; j++) {
            if (prices[j] &gt; max) max = prices[j];
        }

        localProfit = max - prices[i];
        if (localProfit &gt; maxProfit) maxProfit = localProfit;
    }

    return maxProfit;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Intersection of Two Linked Lists]]></title>
    <link href="http://smilevchy.github.io/blog/2015/01/19/intersection-of-two-linked-lists/"/>
    <updated>2015-01-19T10:36:39+08:00</updated>
    <id>http://smilevchy.github.io/blog/2015/01/19/intersection-of-two-linked-lists</id>
    <content type="html"><![CDATA[<p>原题链接: <a href="https://oj.leetcode.com/problems/intersection-of-two-linked-lists/">https://oj.leetcode.com/problems/intersection-of-two-linked-lists/</a></p>

<!-- more -->


<pre><code>public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
    if (headA == null || headB == null) return null;
    if (headA == headB) return headA;

    ListNode cursorA = headA;
    ListNode cursorB = headB;
    while (cursorA != null &amp;&amp; cursorB != null) {
        cursorA = cursorA.next;
        cursorB = cursorB.next;
    }

    ListNode longCursorStart = null;
    ListNode longCursorEnd = null;
    ListNode shortCursor = null;
    if (cursorA != null) {
        longCursorStart = headA;
        longCursorEnd = cursorA;
        shortCursor = headB;
    } else if (cursorB != null) {
        longCursorStart = headB;
        longCursorEnd = cursorB;
        shortCursor = headA;
    } else {
        longCursorStart = headA;
        longCursorEnd = null;
        shortCursor = headB;
    }

    while (longCursorStart != null &amp;&amp; longCursorEnd != null) {
        longCursorStart = longCursorStart.next;
        longCursorEnd = longCursorEnd.next;
    }

    while (longCursorStart != shortCursor) {
        longCursorStart = longCursorStart.next;
        shortCursor = shortCursor.next;
    }

    return longCursorStart;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Leetcode_Gas Station]]></title>
    <link href="http://smilevchy.github.io/blog/2015/01/16/leetcode-gas-station/"/>
    <updated>2015-01-16T18:05:34+08:00</updated>
    <id>http://smilevchy.github.io/blog/2015/01/16/leetcode-gas-station</id>
    <content type="html"><![CDATA[<p>原题链接: <a href="https://oj.leetcode.com/problems/gas-station/">https://oj.leetcode.com/problems/gas-station/</a></p>

<!-- more -->


<pre><code>public int canCompleteCircuit(int[] gas, int[] cost) {
    if (gas == null || cost == null || gas.length != cost.length) {
        return -1;
    }

    int totalGas = 0;
    int subSeqGas = 0;
    int start = 0;
    for (int i = 0, numGasStation = gas.length; i &lt; numGasStation; i++) {
        subSeqGas += gas[i] - cost[i];
        totalGas += gas[i] - cost[i];

        if (subSeqGas &lt; 0) {
            subSeqGas = 0;
            start = i + 1;
        }
    }

    return totalGas &gt;= 0 ? start : -1;
}

public int canCompleteCircuit(int[] gas, int[] cost) {
    // brute force (will meet time limit exceed)

    if (gas == null || cost == null || gas.length != cost.length) return -1;

    int numGasStation = gas.length;
    int remainGas = 0;
    int start = 0;
    boolean found = false;

    while (!found &amp;&amp; start &lt; numGasStation) {
        remainGas = 0;

        for (int index = start;;) {
            remainGas += gas[index];

            if (remainGas &gt;= cost[index]) {
                remainGas -= cost[index];

                if (index == numGasStation - 1) {
                    index = 0;
                } else {
                    index++;
                }

                if (index == start) {
                    found = true;
                    break;
                }
            } else {
                start++;
                break;
            }
        }

    }

    return found ? start : -1;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Leetcode_Implement strStr()]]></title>
    <link href="http://smilevchy.github.io/blog/2015/01/15/leetcode-implement-strstr/"/>
    <updated>2015-01-15T15:06:59+08:00</updated>
    <id>http://smilevchy.github.io/blog/2015/01/15/leetcode-implement-strstr</id>
    <content type="html"><![CDATA[<p>原题链接: <a href="https://oj.leetcode.com/problems/implement-strstr/">https://oj.leetcode.com/problems/implement-strstr/</a></p>

<!-- more -->


<pre><code>public int strStr(String haystack, String needle) {
    if (haystack == null || needle == null) return -1;

    int haystackLen = haystack.length();
    int needleLen = needle.length();

    if (needleLen &gt; haystackLen) return -1;
    if (needleLen == 0) return 0;

    char[] haystackChars = haystack.toCharArray();
    char[] needleChars = needle.toCharArray();

    int index = 0;
    boolean found = false;
    while (index &lt; haystackLen) {
        if (haystackLen - index &lt; needleLen) {
            break;
        }

        int i = index;

        for (int j = 0; j &lt; needleLen; j++) {
            if (needleChars[j] != haystackChars[i]) {
                break;
            }

            i++;

            if (j == needleLen - 1) {
                found = true;
            }
        }

        if (found) {
            break;
        } else {
            index++;
        }
    }

    return found ? index : -1;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Leetcode_Majority Element]]></title>
    <link href="http://smilevchy.github.io/blog/2015/01/15/leetcode-majority-element/"/>
    <updated>2015-01-15T11:33:16+08:00</updated>
    <id>http://smilevchy.github.io/blog/2015/01/15/leetcode-majority-element</id>
    <content type="html"><![CDATA[<p>原题链接: <a href="https://oj.leetcode.com/problems/majority-element/">https://oj.leetcode.com/problems/majority-element/</a></p>

<!-- more -->


<pre><code>public int majorityElement(int[] num) {
    Map&lt;Integer, Integer&gt; numToCount = new HashMap&lt;Integer, Integer&gt;();

    for (int i = 0, len = num.length; i &lt; len; i++) {
        if (numToCount.get(num[i]) != null) {
            numToCount.put(num[i], numToCount.get(num[i]) + 1);
        } else {
            numToCount.put(num[i], 1);
        }
    }

    int majorityNum = 0;
    int maxLen = Integer.MIN_VALUE;

    Iterator&lt;Integer&gt; itr = numToCount.keySet().iterator();

    while (itr.hasNext()) {
        int key = itr.next();
        if (numToCount.get(key) &gt; maxLen) {
            maxLen = numToCount.get(key);
            majorityNum = key;
        }
    }

    return majorityNum;
}
</code></pre>
]]></content>
  </entry>
  
</feed>
