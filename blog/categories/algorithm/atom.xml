<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Algorithm | smilevchy's blog]]></title>
  <link href="http://smilevchy.github.io/blog/categories/algorithm/atom.xml" rel="self"/>
  <link href="http://smilevchy.github.io/"/>
  <updated>2014-11-18T10:40:11+08:00</updated>
  <id>http://smilevchy.github.io/</id>
  <author>
    <name><![CDATA[smilevchy]]></name>
    <email><![CDATA[smilevchy@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Leetcode_Maximum Depth of Binary Tree]]></title>
    <link href="http://smilevchy.github.io/blog/2014/11/18/leetcode-maximum-depth-of-binary-tree/"/>
    <updated>2014-11-18T10:39:00+08:00</updated>
    <id>http://smilevchy.github.io/blog/2014/11/18/leetcode-maximum-depth-of-binary-tree</id>
    <content type="html"><![CDATA[<p>原题链接: <a href="https://oj.leetcode.com/problems/maximum-depth-of-binary-tree/">https://oj.leetcode.com/problems/maximum-depth-of-binary-tree/</a></p>

<!-- more -->


<pre><code>public int maxDepth(TreeNode root) {
    if (root == null) return 0;

    if (root.left == null &amp;&amp; root.right == null) {
        return 1;
    }

    return Math.max(maxDepth(root.left), maxDepth(root.right)) + 1;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Leetcode_Minimum Depth of Binary Tree]]></title>
    <link href="http://smilevchy.github.io/blog/2014/11/18/leetcode-minimum-depth-of-binary-tree/"/>
    <updated>2014-11-18T10:30:14+08:00</updated>
    <id>http://smilevchy.github.io/blog/2014/11/18/leetcode-minimum-depth-of-binary-tree</id>
    <content type="html"><![CDATA[<p>原题链接: <a href="https://oj.leetcode.com/problems/minimum-depth-of-binary-tree/">https://oj.leetcode.com/problems/minimum-depth-of-binary-tree/</a></p>

<!-- more -->


<pre><code>public int minDepth(TreeNode root) {
    if (root == null) return 0;

    if (root.left == null &amp;&amp; root.right == null) {
        return 1;
    }  else if (root.left != null &amp;&amp; root.right != null) {
        return Math.min(minDepth(root.left) + 1, minDepth(root.right) + 1);
    } else if (root.left != null) {
        return minDepth(root.left) + 1;
    } else {
        return minDepth(root.right) + 1;
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Leetcode_Pascal's Triangle II]]></title>
    <link href="http://smilevchy.github.io/blog/2014/11/18/leetcode-pascals-triangle-ii/"/>
    <updated>2014-11-18T10:11:53+08:00</updated>
    <id>http://smilevchy.github.io/blog/2014/11/18/leetcode-pascals-triangle-ii</id>
    <content type="html"><![CDATA[<p>原题链接: <a href="https://oj.leetcode.com/problems/pascals-triangle-ii/">https://oj.leetcode.com/problems/pascals-triangle-ii/</a></p>

<!-- more -->


<pre><code>public List&lt;Integer&gt; getRow(int rowIndex) {
    if (rowIndex &lt; 0) return new ArrayList&lt;Integer&gt;();

    List&lt;Integer&gt; row = new ArrayList&lt;Integer&gt;(rowIndex + 1);

    if (rowIndex == 0) {
        row.add(1);
    } else {
        List&lt;Integer&gt; upRow = getRow(rowIndex - 1);

        for (int i = 0; i &lt;= rowIndex; i++) {
            if (i == 0 || i == rowIndex) {
                row.add(1);
            } else {
                row.add(upRow.get(i - 1) + upRow.get(i));
            }
        }
    }

    return row;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Leetcode_Pascal's Triangle]]></title>
    <link href="http://smilevchy.github.io/blog/2014/11/17/leetcode-pascals-triangle/"/>
    <updated>2014-11-17T18:42:09+08:00</updated>
    <id>http://smilevchy.github.io/blog/2014/11/17/leetcode-pascals-triangle</id>
    <content type="html"><![CDATA[<p>原题链接: <a href="https://oj.leetcode.com/problems/pascals-triangle/">https://oj.leetcode.com/problems/pascals-triangle/</a></p>

<!-- more -->


<pre><code>public List&lt;List&lt;Integer&gt;&gt; generate(int numRows) {
    if (numRows &lt;= 0) return new ArrayList&lt;List&lt;Integer&gt;&gt;();

    List&lt;List&lt;Integer&gt;&gt; pascalNums = new ArrayList&lt;List&lt;Integer&gt;&gt;(numRows);

    List&lt;Integer&gt; row = new ArrayList&lt;Integer&gt;(1);
    row.add(1);
    pascalNums.add(row);

    for (int i = 1; i &lt; numRows; i++) {
        row = new ArrayList&lt;Integer&gt;(i + 1);

        for (int j = 0; j &lt;= i; j++) {
            if (j == 0) {
                row.add(pascalNums.get(i - 1).get(0));
            } else if (j == i) {
                row.add(pascalNums.get(i - 1).get(pascalNums.get(i - 1).size() - 1));
            } else {
                row.add(pascalNums.get(i - 1).get(j - 1) + pascalNums.get(i - 1).get(j));
            }
        }

        pascalNums.add(row);
    }

    return pascalNums;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Leetcode_Path Sum]]></title>
    <link href="http://smilevchy.github.io/blog/2014/11/17/leetcode-path-sum/"/>
    <updated>2014-11-17T18:18:32+08:00</updated>
    <id>http://smilevchy.github.io/blog/2014/11/17/leetcode-path-sum</id>
    <content type="html"><![CDATA[<p>原题链接: <a href="https://oj.leetcode.com/problems/path-sum/">https://oj.leetcode.com/problems/path-sum/</a></p>

<!-- more -->


<pre><code>public boolean hasPathSum(TreeNode root, int sum) {
    if (root == null) return false;

    if (root.left == null &amp;&amp; root.right == null &amp;&amp; root.val == sum) {
        return true;
    } if (hasPathSum(root.left, sum - root.val) || hasPathSum(root.right, sum - root.val)) {
        return true;
    }

    return false;
}
</code></pre>
]]></content>
  </entry>
  
</feed>
