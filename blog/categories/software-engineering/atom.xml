<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Software-engineering | smilevchy's blog]]></title>
  <link href="http://smilevchy.github.io/blog/categories/software-engineering/atom.xml" rel="self"/>
  <link href="http://smilevchy.github.io/"/>
  <updated>2014-11-08T13:52:49+08:00</updated>
  <id>http://smilevchy.github.io/</id>
  <author>
    <name><![CDATA[smilevchy]]></name>
    <email><![CDATA[smilevchy@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Reaction to &lt;Code Complete&gt;]]></title>
    <link href="http://smilevchy.github.io/blog/2014/08/02/reaction-to-code-complete/"/>
    <updated>2014-08-02T15:25:54+08:00</updated>
    <id>http://smilevchy.github.io/blog/2014/08/02/reaction-to-code-complete</id>
    <content type="html"><![CDATA[<p>终于把 &lt;Code Complete>.2nd 读完了，1000多页的量。由于是电子版的，因此没有那种一看到很厚的一本书就被吓倒的感觉，但也少了那种消灭完一本大书的成就感。</p>

<p>以下是自己对一些有趣的章节的简短的笔记流记录&hellip;&hellip;</p>

<!-- more -->


<p><em>Guidelines about ADT</em></p>

<ol>
<li>把常见的底层数据类型创建为 ADT 并使用这些 ADT, 而不再使用底层数据类型</li>
<li>把像文件这样的常用对象当作 ADT</li>
<li>简单的事物也可当作 ADT</li>
<li>不要让 ADT 依赖于其存储介质</li>
</ol>


<p><em>Thinking about Class</em></p>

<p>Class is based on definition of ADT</p>

<p><em>Defensive Programming</em></p>

<ol>
<li>检查所有非法输入数据</li>
<li>使用 Assertions</li>
<li>Error-Handling Techniques

<ul>
<li>返回中立值</li>
<li>换用下一个正确的数据</li>
<li>返回与前次相同的数据</li>
<li>换用最接近的合法值</li>
<li>把警告信息记录到日志文件中</li>
<li>返回一个错误码</li>
<li>调用错误处理子程序或对象</li>
<li>当错误发生时显示出错误消息</li>
<li>用最妥当的方式在局部处理错误</li>
<li>关闭程序</li>
</ul>
</li>
<li>Compromise between Robustness and Correctness</li>
<li>隔离程序，使之包容由错误造成的损害

<blockquote><p>选择某些接口作为安全区域的边界，对穿越安全区域边界的数据进行合法性校验
当数据非法时做出相应的反映；
输入数据时将其转换为恰当的类型</p></blockquote></li>
<li>使用调试助手（辅助调试的代码）</li>
<li>使用进攻式编程</li>
<li>避免过度防御式编程</li>
</ol>


<p>以下是一部分整理的此书所推荐的书籍简短记录&hellip;&hellip;</p>

<p><em>Fault Tolerance</em></p>

<ol>
<li>IEEE Software 2001.07</li>
<li>Agile Database Techniques (Ambler 2003)</li>
<li>On the design and development of program families (Parnas 1976)</li>
</ol>


<p><em>Software Design, General</em></p>

<ol>
<li>The Object-Oriented Thought Process</li>
<li>Object-Oriented Design Heuristics</li>
<li><strong>Programming on Purpose: Essays on Software Design (Plauger)</strong></li>
<li>The Art of UNIX Programming</li>
</ol>


<p><em>Software Design Theory</em></p>

<ol>
<li>A Rational Design Process: How and Why to Fake it (Parnas)</li>
<li>On the Criteria to Be Used in Decomposing Systems into Modules</li>
<li>Designing Software for Ease of Extension and Contraction (Parnas 1979)</li>
<li>The Modular Structure of Complex Systems</li>
</ol>


<p><em>Design Patterns</em></p>

<ol>
<li>Design Patterns Explained</li>
</ol>


<p><em>Design in General</em></p>

<ol>
<li>Conceptual Blockbusting: A Guide to Better Ideas (Adams 2001)</li>
<li>How to Solve It: A New Aspect of Mathematical Method</li>
<li>How to Solve It: Modern Heuristics</li>
<li>The Sciences of the Artificial</li>
<li>Software Creativity</li>
</ol>


<p><em>Assorted</em></p>

<ol>
<li>Pragmatic Programmer</li>
<li>Applied UML and Patterns</li>
<li>Fundamentals of Object-Oriented Design in UML</li>
<li>High Output Management</li>
<li>Test-Driven Development: By Example (Beck)</li>
<li>Software Engineering Metrics and Models</li>
<li>C Programming Guidelines (Plum)</li>
<li>The Elements of Java Style</li>
<li>Professional Software Development</li>
<li>Principles of software Engineering</li>
<li>Design and Code Inspections to Reduce Errors in Program Development</li>
<li>The Psychology of Computer Programming</li>
<li>Managing the Software Process</li>
<li>Refactoring: Improving the Design of Existing Code</li>
<li>Rapid Development</li>
<li>Code Reading: The Open Source Perspective</li>
<li>Programmers at Work</li>
</ol>


<p><em>Classes in General</em></p>

<ol>
<li><strong>Object-Oriented Software Construction</strong></li>
<li>Effective Java Programming Language Guide</li>
</ol>


<p><em>Defensive Programming</em></p>

<ol>
<li>Assertions

<ul>
<li>Writing Solid Code(Maguire)</li>
</ul>
</li>
<li>Secure

<ul>
<li>Writing Secure Code</li>
</ul>
</li>
</ol>


<p><em>Data Structure</em></p>

<ol>
<li>Introduction to Algorithms (Cormen,H.Thomas, Charles E.Leiseron, Ronald L.Rivest)</li>
<li>Algorithms in C++ (Sedgewick, Robert), Parts 1-4, Parts 5</li>
<li>Algorithms in Java, Parts 1-4</li>
<li>Algorithms in Java, Parts 5</li>
</ol>


<p><em>Software Complexity</em></p>

<ol>
<li>A Complexity Measure (Tom McCabe)</li>
<li>Software Engineering Metrics and Models</li>
</ol>


<p><em>Software Testing</em></p>

<ol>
<li>Testing Computer Software</li>
<li>Lessons Learned in Software Testing</li>
<li>Introducing Software Testing</li>
<li>How to Break Software : A Practical Guide to Testing</li>
<li>What is Software Testing? And Why Is It So Hard?</li>
<li>The Art of Software Testing</li>
<li>Test-Driven Development: By Example</li>
<li>Bug Patterns in Java</li>
</ol>


<p><em>Performance Tuning</em></p>

<ol>
<li>Performance Solutions: A Practical Guide to Creating Responsive, Scalable Software</li>
<li>&ldquo;Optimization: Your Worst Enemy&rdquo; (<a href="http://www.flounder.com/optimization.htm">http://www.flounder.com/optimization.htm</a>)</li>
<li><strong>Writing Efficient Programs</strong></li>
<li>Web Performance Tuning</li>
<li>Java Performance Tuning</li>
<li>Java Platform Performance: Strategies and Tactics</li>
</ol>


<p><em>Programming Tools</em></p>

<ol>
<li>www.sdmagazine.com/jolts <Software Development Magazine></li>
</ol>


<p><em>Program Style</em></p>

<ol>
<li>The Practice of Programming</li>
<li>The Elements of Java Style</li>
<li><strong>The Elements of Programming Style</strong></li>
<li><strong>Literate Programming</strong></li>
</ol>


<p><em>Personal Characteristics</em></p>

<ol>
<li>The Humble Programmer</li>
<li>The Psychology of Computer Programming: Silver Anniversary Edition</li>
<li>Tutorial: Human Factors in Software Development</li>
</ol>


<p><em>Software Engineering</em></p>

<ol>
<li>Facts and Fallacies of Software Engineering</li>
<li>Professional Software Development</li>
<li>The Mythical Man-Month</li>
<li>PeopleWare</li>
<li><strong>Software Creativity</strong></li>
<li>Software Engineering: A Practitioner&rsquo;s Approach</li>
<li>Software Engineering (Ian Sommerville)</li>
</ol>

]]></content>
  </entry>
  
</feed>
