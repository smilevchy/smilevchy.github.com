<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[smilevchy's blog]]></title>
  <link href="http://smilevchy.github.io/atom.xml" rel="self"/>
  <link href="http://smilevchy.github.io/"/>
  <updated>2014-11-20T15:42:02+08:00</updated>
  <id>http://smilevchy.github.io/</id>
  <author>
    <name><![CDATA[smilevchy]]></name>
    <email><![CDATA[smilevchy@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Leetcode_Merge Two Sorted Lists]]></title>
    <link href="http://smilevchy.github.io/blog/2014/11/20/leetcode-merge-two-sorted-lists/"/>
    <updated>2014-11-20T15:41:09+08:00</updated>
    <id>http://smilevchy.github.io/blog/2014/11/20/leetcode-merge-two-sorted-lists</id>
    <content type="html"><![CDATA[<p>原题链接: <a href="https://oj.leetcode.com/problems/merge-two-sorted-lists/">https://oj.leetcode.com/problems/merge-two-sorted-lists/</a></p>

<!-- more -->


<pre><code>public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
    if (l1 == null) return l2;
    if (l2 == null) return l1;

    ListNode cursorLeft = l1;
    ListNode cursorRight = l2;
    ListNode prevLeft = null;

    while (cursorRight != null) {
        while (cursorLeft != null &amp;&amp; cursorLeft.val &lt;= cursorRight.val) {
            prevLeft = cursorLeft;
            cursorLeft = cursorLeft.next;
        }

        if (prevLeft == null) {
            l2 = cursorRight.next;
            cursorRight.next = l1;
            l1 = cursorRight;
            cursorRight = l2;
        } else if (cursorLeft == null) {
            l2 = cursorRight.next;
            cursorRight.next = null;
            prevLeft.next = cursorRight;
            cursorRight = l2;
        } else {
            l2 = cursorRight.next;
            cursorRight.next = cursorLeft;
            prevLeft.next = cursorRight;
            cursorRight = l2;
        }

        cursorLeft = l1;
    }

    return l1;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Leetcode_Add Binary]]></title>
    <link href="http://smilevchy.github.io/blog/2014/11/20/leetcode-add-binary/"/>
    <updated>2014-11-20T14:51:16+08:00</updated>
    <id>http://smilevchy.github.io/blog/2014/11/20/leetcode-add-binary</id>
    <content type="html"><![CDATA[<p>原题链接: <a href="https://oj.leetcode.com/problems/add-binary/">https://oj.leetcode.com/problems/add-binary/</a></p>

<!-- more -->


<pre><code>public String addBinary(String a, String b) {
    if (a == null &amp;&amp; b == null) return null;

    StringBuilder sb = new StringBuilder(a);

    int i = sb.length() - 1;
    int j = b.length() - 1;
    int carry = 0;
    char ac;
    char bc;

    while (i &gt;= 0 &amp;&amp; j &gt;= 0) {
        ac = sb.charAt(i);
        bc = b.charAt(j);

        sb.setCharAt(i, (char) ('0' + (ac - '0' + bc - '0' + carry) % 2));
        carry = (ac - '0' + bc - '0' + carry) / 2;

        i--;
        j--;
    }

    while (i &gt;= 0) {
        ac = sb.charAt(i);
        sb.setCharAt(i, (char) ('0' + (ac - '0' + carry) % 2));
        carry = (ac - '0' + carry) / 2;
        i--;
    }

    while (j &gt;= 0) {
        bc = b.charAt(j);
        sb.insert(0, (char) ('0' + (bc - '0' + carry) % 2));
        carry = (bc - '0' + carry) / 2;
        j--;
    }

    if (carry &gt; 0) {
        sb.insert(0, '1');
    }

    return sb.toString();
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Leetcode_Climbing Stairs]]></title>
    <link href="http://smilevchy.github.io/blog/2014/11/20/leetcode-climbing-stairs/"/>
    <updated>2014-11-20T11:52:56+08:00</updated>
    <id>http://smilevchy.github.io/blog/2014/11/20/leetcode-climbing-stairs</id>
    <content type="html"><![CDATA[<p>原题链接: <a href="https://oj.leetcode.com/problems/climbing-stairs/">https://oj.leetcode.com/problems/climbing-stairs/</a></p>

<!-- more -->


<pre><code>public int climbStairs(int n) {
    if (n &lt;= 0) return 0;

    if (n == 1) {
        return 1;
    } else if (n == 2) {
        return 2;
    }

    int a = 1;
    int b = 2;
    int c = 0;

    for (int i = 3; i &lt;= n; i++) {
        c = a + b;
        a = b;
        b = c;
    }

    return c;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Leetcode_Remove Element]]></title>
    <link href="http://smilevchy.github.io/blog/2014/11/20/leetcode-remove-element/"/>
    <updated>2014-11-20T11:19:55+08:00</updated>
    <id>http://smilevchy.github.io/blog/2014/11/20/leetcode-remove-element</id>
    <content type="html"><![CDATA[<p>原题链接: <a href="https://oj.leetcode.com/problems/remove-element/">https://oj.leetcode.com/problems/remove-element/</a></p>

<!-- more -->


<pre><code>public int removeElement(int[] A, int elem) {
    if (A == null || A.length == 0) return 0;

    int length = A.length;
    int index = 0;

    for (int i = 0; i &lt; length; i++) {
        if (A[i] == elem) {
            A[index] = A[length - 1];
            i--;
            length--;
        } else {
            index++;
        }
    }

    return index;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Leetcode_Remove Duplicates From Sorted Array]]></title>
    <link href="http://smilevchy.github.io/blog/2014/11/20/leetcode-remove-duplicates-from-sorted-array/"/>
    <updated>2014-11-20T10:24:22+08:00</updated>
    <id>http://smilevchy.github.io/blog/2014/11/20/leetcode-remove-duplicates-from-sorted-array</id>
    <content type="html"><![CDATA[<p>原题链接: <a href="https://oj.leetcode.com/problems/remove-duplicates-from-sorted-array/">https://oj.leetcode.com/problems/remove-duplicates-from-sorted-array/</a></p>

<!-- more -->


<pre><code>public int removeDuplicates(int[] A) {
    if (A == null || A.length == 0) return 0;

    int index = 1;

    for (int i = 1, length = A.length; i &lt; length; i++) {
        if (A[i] != A[i - 1]) {
            A[index] = A[i];
            index++;
        }
    }

    return index;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Leetcode_Valid Parentheses]]></title>
    <link href="http://smilevchy.github.io/blog/2014/11/19/leetcode-valid-parentheses/"/>
    <updated>2014-11-19T18:19:46+08:00</updated>
    <id>http://smilevchy.github.io/blog/2014/11/19/leetcode-valid-parentheses</id>
    <content type="html"><![CDATA[<p>原题链接: <a href="https://oj.leetcode.com/problems/valid-parentheses/">https://oj.leetcode.com/problems/valid-parentheses/</a></p>

<!-- more -->


<pre><code>public boolean isValid(String s) {
    if (s == null) return false;

    int length = s.length();
    char c;
    Stack&lt;Character&gt; stack = new Stack&lt;Character&gt;();

    for (int i = 0; i &lt; length; i++) {
        c = s.charAt(i);

        switch (c) {
            case '(':
            case '{':
            case '[':
                stack.push(c);

                break;

            case ')':
                try {
                    char prevChar = stack.pop();
                    if (prevChar != '(') return false;  
                } catch (Exception e) {
                    return false;
                }

                break;

            case '}':
                try {
                    char prevChar = stack.pop();
                    if (prevChar != '{') return false;  
                } catch (Exception e) {
                    return false;
                }

                break;

            case ']':
                try {
                    char prevChar = stack.pop();
                    if (prevChar != '[') return false;  
                } catch (Exception e) {
                    return false;
                }

                break;

            default:
                return false;
        }
    }

    if (!stack.isEmpty()) return false;

    return true;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Leetcode_Remove Nth Node From End of List]]></title>
    <link href="http://smilevchy.github.io/blog/2014/11/19/leetcode-remove-nth-node-from-end-of-list/"/>
    <updated>2014-11-19T17:55:05+08:00</updated>
    <id>http://smilevchy.github.io/blog/2014/11/19/leetcode-remove-nth-node-from-end-of-list</id>
    <content type="html"><![CDATA[<p>原题链接: <a href="https://oj.leetcode.com/problems/remove-nth-node-from-end-of-list/">https://oj.leetcode.com/problems/remove-nth-node-from-end-of-list/</a></p>

<!-- more -->


<pre><code>public ListNode removeNthFromEnd(ListNode head, int n) {
    if (head == null) return null;
    if (n == 0) return head;

    ListNode cursor = head;
    int size = 0;

    while (cursor != null) {
        cursor = cursor.next;
        size++;
    }

    cursor = head;
    int targetIndex = size - n;
    int cursorIndex = 0;
    ListNode prevNode = null;

    while (cursorIndex &lt; targetIndex) {
        prevNode = cursor;
        cursor = cursor.next;
        cursorIndex++;
    }

    if (prevNode == null) {
        head = cursor.next;
    } else {
        prevNode.next = cursor.next;
    }

    return head;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Leetcode_Merge Sorted Array]]></title>
    <link href="http://smilevchy.github.io/blog/2014/11/19/leetcode-merge-sorted-array/"/>
    <updated>2014-11-19T17:00:17+08:00</updated>
    <id>http://smilevchy.github.io/blog/2014/11/19/leetcode-merge-sorted-array</id>
    <content type="html"><![CDATA[<p>原题链接: <a href="https://oj.leetcode.com/problems/merge-sorted-array/">https://oj.leetcode.com/problems/merge-sorted-array/</a></p>

<!-- more -->


<pre><code>public void merge(int A[], int m, int B[], int n) {
    int size = m + n;
    int[] workspace = new int[size];

    int i = 0;
    int j = 0;
    int k = 0;

    while (i &lt; m &amp;&amp; j &lt; n) {
        if (A[i] &lt; B[j]) {
            workspace[k++] = A[i++];
        } else {
            workspace[k++] = B[j++];
        }
    }

    while (i &lt; m) {
        workspace[k++] = A[i++];
    }

    while (j &lt; n) {
        workspace[k++] = B[j++];
    }

    for (k = 0; k &lt; size; k++) {
        A[k] = workspace[k];
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Leetcode_Binary Tree Level Order Traversal II]]></title>
    <link href="http://smilevchy.github.io/blog/2014/11/19/leetcode-binary-tree-level-order-traversal-ii/"/>
    <updated>2014-11-19T15:46:19+08:00</updated>
    <id>http://smilevchy.github.io/blog/2014/11/19/leetcode-binary-tree-level-order-traversal-ii</id>
    <content type="html"><![CDATA[<p>原题链接: <a href="https://oj.leetcode.com/problems/binary-tree-level-order-traversal-ii/">https://oj.leetcode.com/problems/binary-tree-level-order-traversal-ii/</a></p>

<!-- more -->


<pre><code>public List&lt;List&lt;Integer&gt;&gt; levelOrderBottom(TreeNode root) {
    LinkedList&lt;List&lt;Integer&gt;&gt; result = new LinkedList&lt;List&lt;Integer&gt;&gt;();

    if (root == null) return result;

    ArrayDeque&lt;TreeNode&gt; queue = new ArrayDeque&lt;TreeNode&gt;();

    queue.offer(root);

    int lastNum = 1;
    int curNum = 0;
    List&lt;Integer&gt; row = new LinkedList&lt;Integer&gt;();

    while (!queue.isEmpty()) {
        lastNum--;

        TreeNode node = queue.poll();
        row.add(node.val);

        if (node.left != null) {
            curNum++;
            queue.offer(node.left);
        }

        if (node.right != null) {
            curNum++;
            queue.offer(node.right);
        }

        if (lastNum == 0) {
            result.addFirst(row);

            lastNum = curNum;
            curNum = 0;
            row = new LinkedList&lt;Integer&gt;();
        }
    }

    return result;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Leetcode_Binary Tree Level Order Traversal]]></title>
    <link href="http://smilevchy.github.io/blog/2014/11/19/leetcode-binary-tree-level-order-traversal/"/>
    <updated>2014-11-19T15:22:05+08:00</updated>
    <id>http://smilevchy.github.io/blog/2014/11/19/leetcode-binary-tree-level-order-traversal</id>
    <content type="html"><![CDATA[<p>原题链接: <a href="https://oj.leetcode.com/problems/binary-tree-level-order-traversal/">https://oj.leetcode.com/problems/binary-tree-level-order-traversal/</a></p>

<!-- more -->


<pre><code>public List&lt;List&lt;Integer&gt;&gt; levelOrder(TreeNode root) {
    if (root == null) return new ArrayList&lt;List&lt;Integer&gt;&gt;();

    List&lt;List&lt;Integer&gt;&gt; result = new ArrayList&lt;List&lt;Integer&gt;&gt;();
    List&lt;Integer&gt; row = new ArrayList&lt;Integer&gt;();

    row.add(root.val);
    result.add(row);

    row = new ArrayList&lt;Integer&gt;();

    List&lt;List&lt;Integer&gt;&gt; leftList = null;
    if (root.left != null) {
        row.add(root.left.val);
        leftList = levelOrder(root.left);
    }

    List&lt;List&lt;Integer&gt;&gt; rightList = null;
    if (root.right != null) {
        row.add(root.right.val);
        rightList = levelOrder(root.right);
    }

    if (row.size() &gt; 0) {
        result.add(row);
    }

    if (leftList != null) {
        leftList = leftList.subList(1, leftList.size());
    }

    if (rightList != null) {
        rightList = rightList.subList(1, rightList.size());
    }

    int i = 0;
    int leftSize = leftList != null ? leftList.size() : 0;
    int rightSize = rightList != null ? rightList.size() : 0;

    for (; i &lt; leftSize; i++) {
        row = new ArrayList&lt;Integer&gt;();

        row.addAll(leftList.get(i));
        if (i &lt; rightSize) row.addAll(rightList.get(i)); 

        result.add(row);
    }
    for (; i &lt; rightSize; i++) {
        row = new ArrayList&lt;Integer&gt;();

        row.addAll(rightList.get(i));

        result.add(row);
    }

    return result;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Leetcode_Balanced Binary Tree]]></title>
    <link href="http://smilevchy.github.io/blog/2014/11/18/leetcode-balanced-binary-tree/"/>
    <updated>2014-11-18T11:36:33+08:00</updated>
    <id>http://smilevchy.github.io/blog/2014/11/18/leetcode-balanced-binary-tree</id>
    <content type="html"><![CDATA[<p>原题链接: <a href="https://oj.leetcode.com/problems/balanced-binary-tree/">https://oj.leetcode.com/problems/balanced-binary-tree/</a></p>

<!-- more -->


<pre><code>public boolean isBalanced(TreeNode root) {
    if (root == null) return true;

    int left = maxDepth(root.left);
    int right = maxDepth(root.right);

    if (Math.abs(left - right) &gt; 1) {
        return false;
    }

    return isBalanced(root.left) &amp;&amp; isBalanced(root.right);
}

public int maxDepth(TreeNode root) {
    if (root == null) return 0;

    if (root.left == null &amp;&amp; root.right == null) {
        return 1;
    }

    return Math.max(maxDepth(root.left), maxDepth(root.right)) + 1;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Leetcode_Maximum Depth of Binary Tree]]></title>
    <link href="http://smilevchy.github.io/blog/2014/11/18/leetcode-maximum-depth-of-binary-tree/"/>
    <updated>2014-11-18T10:39:00+08:00</updated>
    <id>http://smilevchy.github.io/blog/2014/11/18/leetcode-maximum-depth-of-binary-tree</id>
    <content type="html"><![CDATA[<p>原题链接: <a href="https://oj.leetcode.com/problems/maximum-depth-of-binary-tree/">https://oj.leetcode.com/problems/maximum-depth-of-binary-tree/</a></p>

<!-- more -->


<pre><code>public int maxDepth(TreeNode root) {
    if (root == null) return 0;

    if (root.left == null &amp;&amp; root.right == null) {
        return 1;
    }

    return Math.max(maxDepth(root.left), maxDepth(root.right)) + 1;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Leetcode_Minimum Depth of Binary Tree]]></title>
    <link href="http://smilevchy.github.io/blog/2014/11/18/leetcode-minimum-depth-of-binary-tree/"/>
    <updated>2014-11-18T10:30:14+08:00</updated>
    <id>http://smilevchy.github.io/blog/2014/11/18/leetcode-minimum-depth-of-binary-tree</id>
    <content type="html"><![CDATA[<p>原题链接: <a href="https://oj.leetcode.com/problems/minimum-depth-of-binary-tree/">https://oj.leetcode.com/problems/minimum-depth-of-binary-tree/</a></p>

<!-- more -->


<pre><code>public int minDepth(TreeNode root) {
    if (root == null) return 0;

    if (root.left == null &amp;&amp; root.right == null) {
        return 1;
    }  else if (root.left != null &amp;&amp; root.right != null) {
        return Math.min(minDepth(root.left) + 1, minDepth(root.right) + 1);
    } else if (root.left != null) {
        return minDepth(root.left) + 1;
    } else {
        return minDepth(root.right) + 1;
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Leetcode_Pascal's Triangle II]]></title>
    <link href="http://smilevchy.github.io/blog/2014/11/18/leetcode-pascals-triangle-ii/"/>
    <updated>2014-11-18T10:11:53+08:00</updated>
    <id>http://smilevchy.github.io/blog/2014/11/18/leetcode-pascals-triangle-ii</id>
    <content type="html"><![CDATA[<p>原题链接: <a href="https://oj.leetcode.com/problems/pascals-triangle-ii/">https://oj.leetcode.com/problems/pascals-triangle-ii/</a></p>

<!-- more -->


<pre><code>public List&lt;Integer&gt; getRow(int rowIndex) {
    if (rowIndex &lt; 0) return new ArrayList&lt;Integer&gt;();

    List&lt;Integer&gt; row = new ArrayList&lt;Integer&gt;(rowIndex + 1);

    if (rowIndex == 0) {
        row.add(1);
    } else {
        List&lt;Integer&gt; upRow = getRow(rowIndex - 1);

        for (int i = 0; i &lt;= rowIndex; i++) {
            if (i == 0 || i == rowIndex) {
                row.add(1);
            } else {
                row.add(upRow.get(i - 1) + upRow.get(i));
            }
        }
    }

    return row;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Leetcode_Pascal's Triangle]]></title>
    <link href="http://smilevchy.github.io/blog/2014/11/17/leetcode-pascals-triangle/"/>
    <updated>2014-11-17T18:42:09+08:00</updated>
    <id>http://smilevchy.github.io/blog/2014/11/17/leetcode-pascals-triangle</id>
    <content type="html"><![CDATA[<p>原题链接: <a href="https://oj.leetcode.com/problems/pascals-triangle/">https://oj.leetcode.com/problems/pascals-triangle/</a></p>

<!-- more -->


<pre><code>public List&lt;List&lt;Integer&gt;&gt; generate(int numRows) {
    if (numRows &lt;= 0) return new ArrayList&lt;List&lt;Integer&gt;&gt;();

    List&lt;List&lt;Integer&gt;&gt; pascalNums = new ArrayList&lt;List&lt;Integer&gt;&gt;(numRows);

    List&lt;Integer&gt; row = new ArrayList&lt;Integer&gt;(1);
    row.add(1);
    pascalNums.add(row);

    for (int i = 1; i &lt; numRows; i++) {
        row = new ArrayList&lt;Integer&gt;(i + 1);

        for (int j = 0; j &lt;= i; j++) {
            if (j == 0) {
                row.add(pascalNums.get(i - 1).get(0));
            } else if (j == i) {
                row.add(pascalNums.get(i - 1).get(pascalNums.get(i - 1).size() - 1));
            } else {
                row.add(pascalNums.get(i - 1).get(j - 1) + pascalNums.get(i - 1).get(j));
            }
        }

        pascalNums.add(row);
    }

    return pascalNums;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Leetcode_Path Sum]]></title>
    <link href="http://smilevchy.github.io/blog/2014/11/17/leetcode-path-sum/"/>
    <updated>2014-11-17T18:18:32+08:00</updated>
    <id>http://smilevchy.github.io/blog/2014/11/17/leetcode-path-sum</id>
    <content type="html"><![CDATA[<p>原题链接: <a href="https://oj.leetcode.com/problems/path-sum/">https://oj.leetcode.com/problems/path-sum/</a></p>

<!-- more -->


<pre><code>public boolean hasPathSum(TreeNode root, int sum) {
    if (root == null) return false;

    if (root.left == null &amp;&amp; root.right == null &amp;&amp; root.val == sum) {
        return true;
    } if (hasPathSum(root.left, sum - root.val) || hasPathSum(root.right, sum - root.val)) {
        return true;
    }

    return false;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Leetcode_Remove Duplicates From Sorted List]]></title>
    <link href="http://smilevchy.github.io/blog/2014/11/17/leetcode-remove-duplicates-from-sorted-list/"/>
    <updated>2014-11-17T17:25:01+08:00</updated>
    <id>http://smilevchy.github.io/blog/2014/11/17/leetcode-remove-duplicates-from-sorted-list</id>
    <content type="html"><![CDATA[<p>原题链接: <a href="https://oj.leetcode.com/problems/remove-duplicates-from-sorted-list/">https://oj.leetcode.com/problems/remove-duplicates-from-sorted-list/</a></p>

<!-- more -->


<pre><code>public ListNode deleteDuplicates(ListNode head) {
    if (head == null) return null;

    ListNode slowCursor = head;
    ListNode quickCursor = head.next;

    while (quickCursor != null) {
        if (quickCursor.val != slowCursor.val) {
            slowCursor = slowCursor.next;
            quickCursor = quickCursor.next;

            continue;
        }

        slowCursor.next = quickCursor.next;
        quickCursor = quickCursor.next;
    }

    return head;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Leetcode_Triangle]]></title>
    <link href="http://smilevchy.github.io/blog/2014/11/17/leetcode-triangle/"/>
    <updated>2014-11-17T17:08:01+08:00</updated>
    <id>http://smilevchy.github.io/blog/2014/11/17/leetcode-triangle</id>
    <content type="html"><![CDATA[<p>原题链接: <a href="https://oj.leetcode.com/problems/triangle/">https://oj.leetcode.com/problems/triangle/</a></p>

<!-- more -->


<pre><code>public int minimumTotal(List&lt;List&lt;Integer&gt;&gt; triangle) {
    if (triangle == null) return 0;

    int size = triangle.size();
    int[] res = new int[triangle.get(size - 1).size()];

    for (int i = 0, s = triangle.get(size - 1).size(); i &lt; s; i++) {
        res[i] = triangle.get(size - 1).get(i);
    }

    for (int i = size - 2; i &gt;= 0; i--) {
        for (int j = 0; j &lt;= i; j++) {
            res[j] = Math.min(res[j], res[j + 1]) + triangle.get(i).get(j);
        }
    }

    return res[0];
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Leetcode_Word Break]]></title>
    <link href="http://smilevchy.github.io/blog/2014/11/14/leetcode-word-break/"/>
    <updated>2014-11-14T17:45:56+08:00</updated>
    <id>http://smilevchy.github.io/blog/2014/11/14/leetcode-word-break</id>
    <content type="html"><![CDATA[<p>原题链接：<a href="https://oj.leetcode.com/problems/word-break/">https://oj.leetcode.com/problems/word-break/</a></p>

<!-- more -->


<p>&ndash;_&ndash; 一开始用的是穷举法，结果遇到超长字符串时 online-judge system 就会报 limited time exceed 的错。</p>

<pre><code>public boolean wordBreak(String s, Set&lt;String&gt; dict) {
    if (s == null || s.length() == 0) return true;

    int length = s.length();
    boolean[] res = new boolean[length + 1];
    res[0] = true;

    for (int i = 0; i &lt; length; i++) {
        StringBuilder sb = new StringBuilder(s.substring(0, i + 1));

        for (int j = 0; j &lt;= i; j++) {
            if (res[j] &amp;&amp; dict.contains(sb.toString())) {
                res[i + 1] = true;

                break;
            }

            sb.deleteCharAt(0);
        }
    }

    return res[length];
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Today's Shock]]></title>
    <link href="http://smilevchy.github.io/blog/2014/11/13/todays-shocking/"/>
    <updated>2014-11-13T14:12:18+08:00</updated>
    <id>http://smilevchy.github.io/blog/2014/11/13/todays-shocking</id>
    <content type="html"><![CDATA[<p>Need to sort some values which are Chinese.</p>

<p>Firstly, I am thinking to find some third-party libraries to finish this job. However, this may seems to be &ldquo;heavy&rdquo; for project.</p>

<!-- more -->


<p>So I turn to find some useful algorithms.</p>

<p>On Internet, I have found some solutions about how to do this. But some of them look like too bulk. So wandering and wandering, at last I found a sulution which looks the best currently. Some guy say we can use javascript&rsquo;s function : localeCompare().</p>

<p>So, it is what I want to get. Currently it works well, but maybe it will have some drawbacks.</p>

<p>Anyhow, it is a work around now.</p>
]]></content>
  </entry>
  
</feed>
