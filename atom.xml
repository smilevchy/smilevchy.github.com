<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[smilevchy's blog]]></title>
  <link href="http://smilevchy.github.io/atom.xml" rel="self"/>
  <link href="http://smilevchy.github.io/"/>
  <updated>2018-05-27T22:48:27+08:00</updated>
  <id>http://smilevchy.github.io/</id>
  <author>
    <name><![CDATA[smilevchy]]></name>
    <email><![CDATA[smilevchy@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A Pity for Forgetting Javascript]]></title>
    <link href="http://smilevchy.github.io/blog/2018/05/27/forget-how-to-use-javascript/"/>
    <updated>2018-05-27T22:21:38+08:00</updated>
    <id>http://smilevchy.github.io/blog/2018/05/27/forget-how-to-use-javascript</id>
    <content type="html"><![CDATA[<p>周末开始开发一个小程序，然后发现我已经忘记了 Javascript 的很多语法以及相关使用技巧。
上一次使用 Javascript 进行开发已经是三年前了。后面专职做 Android 开发，基本没有碰 Javascript 了。于是马上打开了三年前的 Javascript 项目打算重温下，结果感受到的是陌生的感觉。</p>

<!-- more -->


<p>Such a pity.</p>

<p>说实话，我很喜欢 Javascript 开发带来的那种自由的感觉。Duck typing、 修改快速运行等让当初的我觉得开发竟能如此顺畅。那段使用 Javascript 开发项目的时光应该是目前为止我觉得最开心的时期了。</p>

<p>很遗憾地把 Javascript 给落下了，现在只能一点一点地重温下 Javascript 了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[团建]]></title>
    <link href="http://smilevchy.github.io/blog/2018/05/19/league-building-in-shunde/"/>
    <updated>2018-05-19T22:55:24+08:00</updated>
    <id>http://smilevchy.github.io/blog/2018/05/19/league-building-in-shunde</id>
    <content type="html"><![CDATA[<p>部门组织周末团建，目的地是佛山市顺德区。行程安排是周五下午出发，周六晚上回到深圳。</p>

<p>此时已是周六晚，我已回到深圳的家中，洗完澡，打开电脑，准备记录下这周末在另一个陌生城市的所见所闻。</p>

<!-- more -->


<h5>交通</h5>

<p>周五下午三点左右，我们就乘坐大巴前往佛山市顺德区。从导航软件上看，大概花费两个半小时即在五点半左右可到达目的地。事实上却是，我们在传说中的虎门大桥上堵了一段时间。久已听闻虎门大桥每时每刻无不堵，现在已切身感受到了。最后我们到达顺德时，已经是晚上七点时分了。</p>

<p>周六晚上六点回深圳时再次经过了虎门大桥，再次遇到了堵车，不过没有过来顺德时那么堵了，走走停停十几分钟就过了。同时见到了虎门大桥上的红绿灯。</p>

<p>顺德那边好像没有禁摩，因此路上有很多电动摩托车。许多摩托车排成一排一排的，这景象也是蛮壮观的。</p>

<h5>饮食</h5>

<p>顺德那边的饮食也是广式风味。据说顺德在饮食上很强，私房菜也有很多。鉴于时间关系，没有去体验过私房菜。</p>

<p>到达顺德后的第一顿晚餐是在一家饭馆里进行的，然后上的菜全都是用鸡或者鸽子做成的。是不是可以说顺德那边做禽类的菜很拿手呢？</p>

<p>顺德的双皮奶很出名，导游推荐了『民信』和『仁信』两家。这两家店都是爆满的。于是我们只去了『民信』品尝。看那个菜单，有点小震撼。第一次看到有这么多变种的双皮奶，令人眼花缭乱。最后我只品尝了『椰汁姜撞奶』，感受是，元气满满啊，坐车的疲劳感瞬间一扫而光了。椰汁的香味，姜汁的提神，牛奶的奶味，三者混合在一起，融洽感十足。以后要是有机会再去的话，应该会多品尝几种。</p>

<h5>建筑</h5>

<p>我们的行程地点有逢简水乡和清晖园。</p>

<p>在逢简水乡里，看到了一些古建筑，这些古建筑和广东其他地区的没什么大区别。倒是逢简水乡本身，给人一种小桥流水人家的感觉，古风古味，很像古代武侠传里的场景。划船的大叔说，杨幂曾在这里拍过片。那应该是某部古代武侠片在这里取景过了吧。</p>

<p>清晖园据说是广东四大园林之一。我就随便在里面逛了下，初步感受是这个园林占地蛮大的，里面亭台楼阁、假山瀑布、书房卧室应有尽有。</p>

<h5>感受</h5>

<p>我只要到了一个陌生的城市，总会是有一阵好奇心的。想要探索这座城市，想要了解这座城市的人群的生活面貌、饮食文化。</p>

<p>可惜此次行程安排紧凑，时间也不足，没多少时间可供自由探索。</p>

<p>有机会的话，应该再过来一趟，不赶时间地四处走走，好好探索一番。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[国产配音]]></title>
    <link href="http://smilevchy.github.io/blog/2018/05/13/shocking-of-domestic-dubbing/"/>
    <updated>2018-05-13T22:36:10+08:00</updated>
    <id>http://smilevchy.github.io/blog/2018/05/13/shocking-of-domestic-dubbing</id>
    <content type="html"><![CDATA[<p>昨天看了一个视频 <a href="https://www.bilibili.com/video/av23307959?t=911">『配音演员都是怪物』</a>。看的过程中我的一些长久以来固存的观点被推翻了。</p>

<!-- more -->


<p>大概是从懂事起，我就开始看动漫，就像大部分小孩一样，我接触最多的也是日漫。因此，我慢慢形成的一个观点就是，在动漫界，日语配音是最强的，其他配音带来的只有违和感。也正是因为如此，我总是抗拒看国产配音的动漫。相比日语配音上具有的各种丰富的感情色彩、国产配音就是一种死气沉沉的感觉，从而让我认为我们的配音人员在实力上比不过其他国家的。</p>

<p>一直到偶然间看了上面所说的视频，我才知道，国产配音也是很强大的。我们的配音人员也能表达出丰富的感情，不仅如此，还能在不同作品角色之间进行让观众无法辨别出的转换。</p>

<p>认识到这些以后，我开始对国产配音有了很大的期待。希望我们以后能有更多的由我们自己配音的优秀作品。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用 AndResGuard 遇到的问题]]></title>
    <link href="http://smilevchy.github.io/blog/2018/05/06/problem-using-andresguard/"/>
    <updated>2018-05-06T10:58:06+08:00</updated>
    <id>http://smilevchy.github.io/blog/2018/05/06/problem-using-andresguard</id>
    <content type="html"><![CDATA[<h2>问题</h2>

<p>当初为了缩减应用安装包的大小在项目里集成了 <a href="https://github.com/shwenzhang/AndResGuard">AndResGuard</a>，99% 情况下没有什么问题。但是有的第三方 SDK 中会使用 getIdentifier() 的形式去获取资源，因此如果没有对这部分资源进行白名单配置的话，第三方 SDK 内部就会报错，通常也会引起自己的应用崩溃。</p>

<!-- more -->


<h2>方案</h2>

<h5>1. 只混淆自己项目的资源，不混淆第三方 SDK 资源</h5>

<p>具体思路是：为自己项目所有的资源名字添加特定前缀，正常情况下，不会出现说第三方 SDK 的资源名字也存在相同前缀的情形，然后在 AndResGuard 的白名单配置中添加正则匹配，对于不属于自己项目的资源则不进行混淆。</p>

<p>这种方案优点是自己项目不会在资源混淆出错这个问题上受第三方 SDK 限制，问题可控性大大提高了，缺点是不混淆所有第三方 SDK 资源的话，应用安装包大小缩减的效果会减弱。</p>

<h5>2. 找出所有通过类似 getIdentifier() 形式获取到的资源调用，添加进白名单</h5>

<p>具体思路是：编写脚本工具，若需要对第三方 SDK 反编译则先进行反编译，然后静态扫描 SDK 中的代码文件，正则匹配出 getIdentifier() 的调用处（也许资源动态获取的方法还有其他），提取出资源名字，最后把资源名字添加进 AndResGuard 的白名单配置。</p>

<p>这种方案优点是所有资源可混淆从而使应用安装包大小能相对缩减更多，缺点是问题可控性没那么高，依然受第三方 SDK 影响，而且无法保证脚本能 100% 提取到所有资源动态调用处。</p>

<h5>3. 综合使用方案 1 和 2</h5>

<p>如果资源足够的情况下，其实可以综合使用方案 1 和 2，这样就能继续保证应用安装包缩减的效果，当然，还会继续受第三方 SDK 影响，但是可以通过持续优化工具来逐渐减少问题。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[克服惰性]]></title>
    <link href="http://smilevchy.github.io/blog/2018/04/29/way-to-overcome-laziness/"/>
    <updated>2018-04-29T20:37:26+08:00</updated>
    <id>http://smilevchy.github.io/blog/2018/04/29/way-to-overcome-laziness</id>
    <content type="html"><![CDATA[<p>“去年的计划又是一个都没有完成！”</p>

<p>“明天是周末了，我要好好学习”。周末来了：看漫画、看视频、拿手机刷刷刷……；临睡前：天哪，今天我到底干嘛了，说好的学习的！
……</p>

<!-- more -->


<p>以上场景在我身上出现好几回了，虽然我知道，人都是有惰性的，但是，我越来越深刻地觉得，我的惰性程度有点大。</p>

<p>客观上来说，我不是那种毫无规划地活着的人，我会不断给自己设定短期目标。我有个『每周干什么』计划表，每个周日晚上或者周一早上我都会就新的一周要做什么主线事件制定计划。这个计划表持续了好几年。前面的几年执行效果不错，基本上我都能完成每周计划的大部分事件。最近的一两年，我发现每周计划上的事件大部分都是未完成状态。我后来进行了反思分析，是不是计划任务量过大、是不是计划任务实现难度超出当时个人能力水平？最后我分析得出的结论是，不是我完成不了每周计划，而是我有了惰性。</p>

<p>一个人生活的环境越发安逸，越发容易产生惰性，惰性很容易积累，从 1 开始日积月累，后面慢慢变成 100、1000、10000…… 。</p>

<p>我已清晰意识到了惰性对我的侵蚀这件事，于是我开始找寻克服惰性的方法。</p>

<p>目前我找到的克服惰性的方法就是：习惯。</p>

<p><strong>依靠习惯的力量，就能够克服惰性</strong>。</p>

<p>把那些做了能有效提升个人的事情培养成一种习惯，当某种行为成为习惯后，以后自己就能下意识地完成这件事。即使说有惰性，也影响不了，因为习惯的力量是很大的。这个我深有体会，我举个自己的例子，我上高中时，很容易感冒，然后就要用到纸巾，但是一般人都是固定放置纸巾的，因此每当 要用纸巾却发现手头没有时，那种感觉很抓狂。于是当时我就开始常备 4 张纸巾带在身上，雷打不动地每天坚持着做这件事。后来的情况是我根本不用刻意去想这件事了，只要一出门，就会下意识地带点纸巾在身上。没有任何精神负担，完全是下意识的动作。『带纸巾』这件事已经成功被我培养成习惯了。而这个习惯给我带来的好处是我去哪里都不用担心没纸巾用，而且周围的人需要用纸时都能第一时间想到我，尤其是很多女生对于随身带纸巾的男生都会有好评。所以说，我是确确实实地相信习惯的力量。</p>

<p>因此，我会逐渐把『完成每周干什么计划表』这件事培养成习惯。我相信，当这件事成为习惯后，以后计划表上就不会那么容易出现任务未完成的情况了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[『平行宇宙与梦』]]></title>
    <link href="http://smilevchy.github.io/blog/2018/04/18/joke-about-parallel-universe-and-dream/"/>
    <updated>2018-04-18T23:34:26+08:00</updated>
    <id>http://smilevchy.github.io/blog/2018/04/18/joke-about-parallel-universe-and-dream</id>
    <content type="html"><![CDATA[<p>大部分人都知道，我们生活的地球所处的宇宙无边无际，目前还没有被人类完全探索到。相信很多人都很疑惑，宇宙的边缘到底是什么，或者说，宇宙有没有边缘？</p>

<!-- more -->


<p>其实，宇宙也没有什么特殊之处！</p>

<p>通过类比来进行推理，地球与周围的其他行星以及一些陨石之类的组成了太阳系，而太阳系则与周围其他的星系组成了银河系，而银河系则与周围其他的系组成了更高阶的星系……如此冒泡上去，最终组成一个宇宙。请注意，这里用到了“一个”这个量词。</p>

<p>即是说，其实宇宙也只是大一点的星系而已。</p>

<p>通过这么重要的结论我们可以得出，无所谓再冒出“宇宙的边缘是什么”这种问题了。就是一些行星之类的物体而已。你可以根据银河系的样貌来想象宇宙的样子。</p>

<p>那么，在宇宙周围又存在着什么呢？</p>

<p>在宇宙的周围，存在着更多的其他宇宙。就像地球旁边有火星、木星一样，宇宙周围也有这些同等体。所以上面有提醒大家注意那个量词“一个”。</p>

<p>这些宇宙分别有什么关系呢？我认为，这些宇宙一起构成了“平行宇宙”。</p>

<p>想象你在吹泡泡，一般都能吹出很多泡泡。这些泡泡都是由同一个泡泡分裂出来的。以此为猜想依据，我们可以想象，曾经有一股力量“吹出”了很多“泡泡“，这些”泡泡“即是一个一个的宇宙，同时，每个”泡泡“都或多或少地获得了相似的性质。即是说，在所有这些每个宇宙里，都各自存在着地球、太阳、你、我、他等等。当然，由于造”泡泡“力量的偏差以及”泡泡“间完全相似性达到100%的概率几乎不可能的问题，各个宇宙会呈现出各自的进化偏移。即是说，在目前这个宇宙，你可能是警察，但在某一个平行宇宙，你可能是罪犯。我们可以下定义，平行宇宙之间是”非完全对称性的“。</p>

<p>到这里，关于平行宇宙的讨论先点到为止。</p>

<p>接下来，我们来说说梦。</p>

<p>梦，从古时开始就充满了神秘感，直到近代科学技术的发展，人们对梦的认识才有了新的变化。现代人都知道，一般都是因为近期对某件事情赋予过度关注（有时是下意识的自己没有意识到），然后才会做梦。所谓的”日有所思，夜有所梦“即是此理。</p>

<p>但是，人类对于梦的探索在此止步难进了。到底梦还有什么不为人知的秘密呢？</p>

<p>经过我的思考与论证，我设想，梦是连接平行宇宙的桥梁。</p>

<p>我认为所谓的“日有所思，夜有所梦”是错的。这里的错是指对于做梦的本质理解错了。并不是因为自己过度关注某件事而导致做所谓的梦，而是由于过度关注某件事导致在脑海里产生了一个“连接器”。这个“连接器”正好在人睡觉时才有机会获取足够多的脑部能量来工作。它在发信号！</p>

<p>“连接器”能够发出一种跨越宇宙进行传播的信号，这种信号含有一些特定的元信息，而周围的那些平行宇宙根据这些元信息来决定是否与该“连接器”进行“连接”。要做类比的话，可以这样想象，某个广播台不断发出广播，而你想要接收到这广播的话，你必须调节收音机到对应的频道才行。</p>

<p>假设你最近的焦点是“水”，于是在夜晚，你脑海中的“连接器”不断地发送信号，信号里封装了有关“水”的信息。这些信号跨越了当前宇宙，传达到了各个平行宇宙。至于平行宇宙的“调频”原理则是以那个宇宙的你为依据。如果平行宇宙A中的你正在玩游戏，则这个平行宇宙无法接收这个信号；如果平行宇宙B中的你家里正发洪水，此时信号被接收，平行宇宙B则与当前宇宙中的你进行了“连接”，当前宇宙和平行宇宙B建立了一条信号通道。此时你就在“做梦”了。平行宇宙B中的你看见的、听见的、接触的、感受的事件都会通过信号通道传到你脑海里的“连接器”，从而形成梦。当然，能够接收信号的平行宇宙可能同时有多个，此时就建立了多条“连接”，这也能说明，为什么有时候会感觉做的梦乱七八糟，没有条理，正是因为各个通道都有信号传送过来，接收了各种不同的信息。</p>

<p>好了，对于梦的解释也到此为止。</p>

<p>这里做个总结，对于宇宙，人类还有很长的一段探索路，对于梦，人类知道的确实太少了。关于它们的本质，也许还会有更多令人意想不到的秘密。为了达到成功的探索，我们需要大胆地设想，有力地论证。</p>

<p>我相信，有一天，我们地球人肯定能够探索出这条道路出来！</p>

<br />


<p align="right">于 地球纪元2015.02.28 10:40  小雨</p>


<br />


<hr />

<p>smilevchy: 此篇文章写于 2015 年，当时发表于豆瓣的科幻小组。本来我是写着玩的，并不是想进行一些科学知识的科普。但是，好多人以为我是在认真地传播科学见解。其实，当时我是在一本正经地胡说八道。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[大脑]]></title>
    <link href="http://smilevchy.github.io/blog/2018/04/15/talk-about-brain/"/>
    <updated>2018-04-15T22:41:45+08:00</updated>
    <id>http://smilevchy.github.io/blog/2018/04/15/talk-about-brain</id>
    <content type="html"><![CDATA[<p>从小到大，一直觉得大脑是一个神秘又神奇的器官。就是因为这么一个像豆腐花的东西，我们才有了意识、思维、智能。而目前人类关于大脑的运行机制还没彻底研究清楚，可以说大脑对于我们还是一个“黑盒”。</p>

<p>在这之前，我总是很疑惑，我们的思维是怎么存储在大脑里的。</p>

<!-- more -->


<p>思维是一个抽象的东西，应该是没有化学物质可以用来表示一个人的思维吧？但是也总得有个地方把思维保存下来吧，若不是这样的话，那么我们每个人不就无时无刻地在变换着思维了。这明显不符合现实情况对吧。那么就是说，大脑的确是有一套保存思维的机制了。</p>

<p>靠自己想是想不出来的，这个疑问就跟另一些问题”宇宙到底有没有边界、若有边界的话那边界外是什么“、”到底有没有外星人“一直埋在心底了。</p>

<p>最近读到一本书『人工智能的未来』，这本书主要是讲大脑的运行机制，里面有个理论提到思维是脑细胞间的产物。我觉得这本书可能会给我的问题提供答案。目前这本书还没看完，后面看完后再继续谈这个话题。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Two Projects of April]]></title>
    <link href="http://smilevchy.github.io/blog/2018/04/08/two-projects-of-april/"/>
    <updated>2018-04-08T22:06:41+08:00</updated>
    <id>http://smilevchy.github.io/blog/2018/04/08/two-projects-of-april</id>
    <content type="html"><![CDATA[<p>4 月份计划完成两个小项目。</p>

<p>一个是 Java 代码优化相关，一个是微信开发。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[评论系统]]></title>
    <link href="http://smilevchy.github.io/blog/2018/04/01/change-to-livere-comment-system/"/>
    <updated>2018-04-01T15:41:00+08:00</updated>
    <id>http://smilevchy.github.io/blog/2018/04/01/change-to-livere-comment-system</id>
    <content type="html"><![CDATA[<p>一开始用的是默认自带评论系统 <a href="http://www.disqus.com/">Disqus</a>，但是由于墙的关系，在国内基本用不了。然后搜索了下替代品，发现有友言、多说等国产评论系统。于是试用了友言，结果发现也是用不了。经调查才知，现在众多评论系统基本是“伤亡惨重”。</p>

<p>目前有部分网友实现了基于 Github Issues 的评论系统，考虑到 Github Issues 毕竟不是用来做这个的，虽然 Github 官方已表态不反对这种做法，再加上个人也是不想跑到 Github Issues 那边看评论。于是就先使用了 <a href="https://livere.com/">来必力</a> 这个评论系统。</p>

<p>来必力评论系统是韩国那边开发的。实际使用过程中，速度还是可以的，而且专业性、稳定性上有保证。那就先使用这个评论系统了吧。</p>

<p>不想花费太多时间在这些上面，个人对工具的使用一直遵循着简单方便可用的原则。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[对于保险的学习 - 序言]]></title>
    <link href="http://smilevchy.github.io/blog/2018/03/25/the-study-about-insurance/"/>
    <updated>2018-03-25T23:27:25+08:00</updated>
    <id>http://smilevchy.github.io/blog/2018/03/25/the-study-about-insurance</id>
    <content type="html"><![CDATA[<p>对于保险的相关印象与了解，在这之前主要是从电视看到的“保险是不好的东西”的印象，后面接触了社保后，对于保险的坏印象减少了几分，但也仅止步于此。关于保险的更深层次的内容，了解的还是不多。</p>

<!-- more -->


<p>于是，在专业本行之外，给自己制定了一个学习保险的计划。</p>

<p>期望目标是：</p>

<ol>
<li>了解保险的相关种类</li>
<li>了解不同种类保险的作用以及区别</li>
<li>学会如何对比同一种类保险的不同产品</li>
<li>学会如何配置保险</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Come to Blog Again]]></title>
    <link href="http://smilevchy.github.io/blog/2018/03/15/come-to-blog-again/"/>
    <updated>2018-03-15T21:45:07+08:00</updated>
    <id>http://smilevchy.github.io/blog/2018/03/15/come-to-blog-again</id>
    <content type="html"><![CDATA[<p>很久没有在这个博客上发表过文章了……
新的一年也得有点新改变。因此，立个 Flag：从现在开始，每周至少在这里发表一篇文章，话题不限，字数不限。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Performance Optimization]]></title>
    <link href="http://smilevchy.github.io/blog/2015/10/06/android-performance-optimization/"/>
    <updated>2015-10-06T10:05:16+08:00</updated>
    <id>http://smilevchy.github.io/blog/2015/10/06/android-performance-optimization</id>
    <content type="html"><![CDATA[<p><em>Collections of all kinds of tricks of optimizing app performance.</em></p>

<!-- more -->


<p>Memory Performance Tools:</p>

<ul>
<li>Memory Monitor：查看整个app所占用的内存，以及发生GC的时刻，短时间内发生大量的GC操作是一个危险的信号</li>
<li>Allocation Tracker：使用此工具来追踪内存的分配，</li>
<li>Heap Tool：查看当前内存快照，便于对比分析哪些对象有可能是泄漏了的</li>
</ul>


<hr />

<p>Overall Performance Tools:</p>

<ul>
<li>Lint Tool</li>
<li>Strict Mode Tool</li>
</ul>


<hr />

<p>The Performance Lifecyle</p>

<ul>
<li><p>Gather：收集数据</p>

<ul>
<li>我们可以通过Android SDK里面提供的诸多工具来收集CPU、GPU、内存、电量等性能数据。</li>
</ul>
</li>
<li><p>Insight：分析数据</p>

<ul>
<li>通过上面的步骤，我们获取到了大量的数据，下一步就是分析这些数据。工具帮我们生成了很多可读性强的表格，我们需要事先了解如何查看表格的数据，每一项代表的含义，这样才能够快速定位问题。如果分析数据之后还是没有找到问题，那么就只能不停的重新收集数据，再进行分析，如此循环。</li>
</ul>
</li>
<li><p>Action：解决问题</p>

<ul>
<li>定位到问题之后，我们需要采取行动来解决问题。解决问题之前一定要先有个计划，评估这个解决方案是否可行，是否能够及时的解决问题。</li>
</ul>
</li>
</ul>


<hr />

<p>Ui Layer</p>

<ul>
<li><p>优化布局文件</p>

<ul>
<li><p>tools: hierarchy viewer</p></li>
<li><p>减少布局层次，保持层次扁平化</p></li>
<li>删除不必要的组件</li>
</ul>
</li>
<li><p>查看 GPU 过度渲染</p>

<ul>
<li><p>tools: gpu overdraw display</p></li>
<li><p>利用 cliprect</p></li>
<li>取消设置背景

<ul>
<li>移除Window默认的Background(每个 Activity 调用 setBackgroundDrawable(null))</li>
<li>移除XML布局文件中非必需的Background</li>
<li>按需显示占位背景图片</li>
</ul>
</li>
</ul>
</li>
<li><p>GPU 显示配置文件</p>

<ul>
<li>查看 GPU 绘制图形时是否有异样（如界面某个组件一直在循环绘制）</li>
</ul>
</li>
<li><p>使用 GPU 渲染 View</p></li>
<li><p>自定义 View 覆盖 hasOverlappingRendering() 并返回 false</p></li>
<li><p>Avoiding allocations in onDraw()</p>

<ul>
<li>把分配对象操作移到 onDraw() 方法外面</li>
</ul>
</li>
<li><p>Custom View</p>

<ul>
<li>Useless calls to onDraw() : 第1个是仅仅在View的内容发生改变的时候才去触发invalidate方法，第2个是尽量使用ClipRect等方法来提高绘制的性能</li>
<li>Useless pixels : 减少绘制时不必要的绘制元素，对于那些不可见的元素，我们需要尽量避免重绘</li>
<li>Wasted CPU cycles : 对于不在屏幕上的元素，可以使用Canvas.quickReject把他们给剔除，避免浪费CPU资源。另外尽量使用GPU来进行UI的渲染，这样能够极大的提高程序的整体表现性能</li>
</ul>
</li>
<li><p>Smaller Pixel Formats</p></li>
<li><p>Pre-scaling Bitmaps</p>

<ul>
<li>避免直接调用createScaledBitmap()，应该通过设置 bitmapOption 的 inSampleSize 来进行缩放图像</li>
</ul>
</li>
<li><p>Re-using Bitmaps</p>

<ul>
<li>使用 inBitmap 属性</li>
</ul>
</li>
</ul>


<hr />

<p>Memory Layer</p>

<ul>
<li><p>避免 GC 操作过于频繁</p>

<ul>
<li><p>tools: Memory Monitor / Heap and Allocation Tracker</p></li>
<li><p>reason 1: memory churn</p></li>
<li>reason 2: 瞬间产生大量的对象占用了内存区域，导致各种类型的 GC</li>
</ul>
</li>
<li><p>避免 Memory Leak</p>

<ul>
<li><p>tools: Heap tool / Allocation Track</p></li>
<li><p>method of checking leak: observed activity(use heap tool to capture current memory state) &ndash;> blank activity(call gc() actively , then use heap tool to capture current memory state, now it should not have previous activity&rsquo;s memory footprint. If not, then leak&hellip;)</p></li>
<li><p>method of finding leaked memory footprint: blank activity(use tool of Allocation Track , begin track) &ndash;> observed activity &ndash;> blank activity(end track, then find the objects still alive)</p></li>
<li><p>do not leak views</p>

<ul>
<li>beware callbacks(only if callback uses some context related objects)</li>
<li>beware static objects</li>
</ul>
</li>
</ul>
</li>
<li><p>使用 Object Pools</p></li>
<li>使用 LRU Cache</li>
</ul>


<hr />

<p>Battery Layer</p>

<ul>
<li><p>tools: Battery Historian Tool / JobScheduler API (since level 20)</p></li>
<li><p>我们应该尽量减少唤醒屏幕的次数与持续的时间，使用WakeLock来处理唤醒的问题，能够正确执行唤醒操作并根据设定及时关闭操作进入睡眠状态</p></li>
<li>某些非必须马上执行的操作，例如上传歌曲，图片处理等，可以等到设备处于充电状态或者电量充足的时候才进行</li>
<li>触发网络请求的操作，每次都会保持无线信号持续一段时间，我们可以把零散的网络请求打包进行一次操作，避免过多的无线信号引起的电量消耗</li>
</ul>


<hr />

<p>Network Layer</p>

<ul>
<li>Batch and delay HTTP requests

<ul>
<li>tools: JobScheduler API</li>
</ul>
</li>
<li>Prefetch and Compressed</li>
</ul>


<hr />

<p>Bussiness Layer</p>

<ul>
<li>Batching Background Work Until Later

<ul>
<li>AlarmManager：使用AlarmManager设置定时任务，可以选择精确的间隔时间，也可以选择非精确时间作为参数。除非程序有很强烈的需要使用精确的定时唤醒，否者一定要避免使用他，我们应该尽量使用非精确的方式</li>
<li>SyncAdapter：我们可以使用SyncAdapter为应用添加设置账户，这样在手机设置的账户列表里面可以找到我们的应用</li>
<li>JobSchedulor：这是最简单高效的方法，我们可以设置任务延迟的间隔，执行条件，还可以增加重试机制</li>
</ul>
</li>
</ul>


<hr />

<p>Code Layer</p>

<ul>
<li><p>基于场景选择合适的数据结构</p>

<ul>
<li> 尝试使用官方提供的数据结构(ArrayMap, SparseArray等)</li>
<li> 判断是否使用 enum</li>
</ul>
</li>
<li><p>colors.xml 不要采用业务来命名,直接使用颜色命名</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Something About Inflation]]></title>
    <link href="http://smilevchy.github.io/blog/2015/10/05/something-about-inflation/"/>
    <updated>2015-10-05T22:41:19+08:00</updated>
    <id>http://smilevchy.github.io/blog/2015/10/05/something-about-inflation</id>
    <content type="html"><![CDATA[<p>When using view inflation, there are something we should know.</p>

<!-- more -->


<p>How to inflate a view? Usually by calling&hellip;</p>

<ul>
<li>View#inflate(Context context, int resource, ViewGroup root)</li>
<li>LayoutInflater#inflate(int resource, ViewGroup root)</li>
<li>LayoutInflater#inflate(int resource, ViewGroup root, boolean attachToRoot)</li>
</ul>


<p>Calling is simple. The problem is <em>which one should you call and what arguments should you pass</em>.</p>

<p>To solve these questions, the key is to <em>take insight in the method signature and dive into the source code</em>.</p>

<p>Taking a brief example here:</p>

<pre><code>// A view which presents container
ViewGroup parent = (ViewGroup) findViewById(R.id.container);

// result: layout_height = wrap_content, layout_width = match_parent
view = LayoutInflater.from(this).inflate(R.layout.item, null);
parent.addView(view);

// result: layout_height = 100, layout_width = 100
view = LayoutInflater.from(this).inflate(R.layout.item, null);
parent.addView(view, 100, 100);

// result: layout_height = 25dp, layout_width = 25dp
// returned view is the root view of R.layout.item due to attachRoot = false
view = LayoutInflater.from(this).inflate(R.layout.item, parent, false);
parent.addView(view);

// result: layout_height = 25dp, layout_width = 25dp 
// parent.addView is not necessary as this is already done by attachRoot = true
// returned view is parent due to parent supplied as hierarchy root and attachRoot = true
view = LayoutInflater.from(this).inflate(R.layout.red, parent, true);
</code></pre>

<p>Above code explains the results of different methods.</p>

<p><a href="https://possiblemobile.com/2013/05/layout-inflation-as-intended/">Here is another useful resource</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Best Time to Buy and Sell Stock]]></title>
    <link href="http://smilevchy.github.io/blog/2015/01/19/best-time-to-buy-and-sell-stock/"/>
    <updated>2015-01-19T14:12:40+08:00</updated>
    <id>http://smilevchy.github.io/blog/2015/01/19/best-time-to-buy-and-sell-stock</id>
    <content type="html"><![CDATA[<p>原题链接: <a href="https://oj.leetcode.com/problems/best-time-to-buy-and-sell-stock/">https://oj.leetcode.com/problems/best-time-to-buy-and-sell-stock/</a></p>

<!-- more -->


<pre><code>public int maxProfit(int[] prices) {
    if (prices == null || prices.length == 0) return 0;

    int local = 0;
    int global = 0;
    for (int i = 1, len = prices.length; i &lt; len; i++) {
        local = Math.max(local + prices[i] - prices[i - 1], 0);
        global = Math.max(local, global);
    }

    return global;
}

// brute force (time limit exceed)
public int maxProfit(int[] prices) {
    if (prices == null || prices.length == 0) return 0;

    int maxProfit = 0;
    int localProfit = 0;
    for (int i = 0, len = prices.length; i &lt; len - 1; i++) {
        int max = 0;
        for (int j = i + 1; j &lt; len; j++) {
            if (prices[j] &gt; max) max = prices[j];
        }

        localProfit = max - prices[i];
        if (localProfit &gt; maxProfit) maxProfit = localProfit;
    }

    return maxProfit;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Intersection of Two Linked Lists]]></title>
    <link href="http://smilevchy.github.io/blog/2015/01/19/intersection-of-two-linked-lists/"/>
    <updated>2015-01-19T10:36:39+08:00</updated>
    <id>http://smilevchy.github.io/blog/2015/01/19/intersection-of-two-linked-lists</id>
    <content type="html"><![CDATA[<p>原题链接: <a href="https://oj.leetcode.com/problems/intersection-of-two-linked-lists/">https://oj.leetcode.com/problems/intersection-of-two-linked-lists/</a></p>

<!-- more -->


<pre><code>public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
    if (headA == null || headB == null) return null;
    if (headA == headB) return headA;

    ListNode cursorA = headA;
    ListNode cursorB = headB;
    while (cursorA != null &amp;&amp; cursorB != null) {
        cursorA = cursorA.next;
        cursorB = cursorB.next;
    }

    ListNode longCursorStart = null;
    ListNode longCursorEnd = null;
    ListNode shortCursor = null;
    if (cursorA != null) {
        longCursorStart = headA;
        longCursorEnd = cursorA;
        shortCursor = headB;
    } else if (cursorB != null) {
        longCursorStart = headB;
        longCursorEnd = cursorB;
        shortCursor = headA;
    } else {
        longCursorStart = headA;
        longCursorEnd = null;
        shortCursor = headB;
    }

    while (longCursorStart != null &amp;&amp; longCursorEnd != null) {
        longCursorStart = longCursorStart.next;
        longCursorEnd = longCursorEnd.next;
    }

    while (longCursorStart != shortCursor) {
        longCursorStart = longCursorStart.next;
        shortCursor = shortCursor.next;
    }

    return longCursorStart;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Leetcode_Gas Station]]></title>
    <link href="http://smilevchy.github.io/blog/2015/01/16/leetcode-gas-station/"/>
    <updated>2015-01-16T18:05:34+08:00</updated>
    <id>http://smilevchy.github.io/blog/2015/01/16/leetcode-gas-station</id>
    <content type="html"><![CDATA[<p>原题链接: <a href="https://oj.leetcode.com/problems/gas-station/">https://oj.leetcode.com/problems/gas-station/</a></p>

<!-- more -->


<pre><code>public int canCompleteCircuit(int[] gas, int[] cost) {
    if (gas == null || cost == null || gas.length != cost.length) {
        return -1;
    }

    int totalGas = 0;
    int subSeqGas = 0;
    int start = 0;
    for (int i = 0, numGasStation = gas.length; i &lt; numGasStation; i++) {
        subSeqGas += gas[i] - cost[i];
        totalGas += gas[i] - cost[i];

        if (subSeqGas &lt; 0) {
            subSeqGas = 0;
            start = i + 1;
        }
    }

    return totalGas &gt;= 0 ? start : -1;
}

public int canCompleteCircuit(int[] gas, int[] cost) {
    // brute force (will meet time limit exceed)

    if (gas == null || cost == null || gas.length != cost.length) return -1;

    int numGasStation = gas.length;
    int remainGas = 0;
    int start = 0;
    boolean found = false;

    while (!found &amp;&amp; start &lt; numGasStation) {
        remainGas = 0;

        for (int index = start;;) {
            remainGas += gas[index];

            if (remainGas &gt;= cost[index]) {
                remainGas -= cost[index];

                if (index == numGasStation - 1) {
                    index = 0;
                } else {
                    index++;
                }

                if (index == start) {
                    found = true;
                    break;
                }
            } else {
                start++;
                break;
            }
        }

    }

    return found ? start : -1;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Leetcode_Implement strStr()]]></title>
    <link href="http://smilevchy.github.io/blog/2015/01/15/leetcode-implement-strstr/"/>
    <updated>2015-01-15T15:06:59+08:00</updated>
    <id>http://smilevchy.github.io/blog/2015/01/15/leetcode-implement-strstr</id>
    <content type="html"><![CDATA[<p>原题链接: <a href="https://oj.leetcode.com/problems/implement-strstr/">https://oj.leetcode.com/problems/implement-strstr/</a></p>

<!-- more -->


<pre><code>public int strStr(String haystack, String needle) {
    if (haystack == null || needle == null) return -1;

    int haystackLen = haystack.length();
    int needleLen = needle.length();

    if (needleLen &gt; haystackLen) return -1;
    if (needleLen == 0) return 0;

    char[] haystackChars = haystack.toCharArray();
    char[] needleChars = needle.toCharArray();

    int index = 0;
    boolean found = false;
    while (index &lt; haystackLen) {
        if (haystackLen - index &lt; needleLen) {
            break;
        }

        int i = index;

        for (int j = 0; j &lt; needleLen; j++) {
            if (needleChars[j] != haystackChars[i]) {
                break;
            }

            i++;

            if (j == needleLen - 1) {
                found = true;
            }
        }

        if (found) {
            break;
        } else {
            index++;
        }
    }

    return found ? index : -1;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Leetcode_Majority Element]]></title>
    <link href="http://smilevchy.github.io/blog/2015/01/15/leetcode-majority-element/"/>
    <updated>2015-01-15T11:33:16+08:00</updated>
    <id>http://smilevchy.github.io/blog/2015/01/15/leetcode-majority-element</id>
    <content type="html"><![CDATA[<p>原题链接: <a href="https://oj.leetcode.com/problems/majority-element/">https://oj.leetcode.com/problems/majority-element/</a></p>

<!-- more -->


<pre><code>public int majorityElement(int[] num) {
    Map&lt;Integer, Integer&gt; numToCount = new HashMap&lt;Integer, Integer&gt;();

    for (int i = 0, len = num.length; i &lt; len; i++) {
        if (numToCount.get(num[i]) != null) {
            numToCount.put(num[i], numToCount.get(num[i]) + 1);
        } else {
            numToCount.put(num[i], 1);
        }
    }

    int majorityNum = 0;
    int maxLen = Integer.MIN_VALUE;

    Iterator&lt;Integer&gt; itr = numToCount.keySet().iterator();

    while (itr.hasNext()) {
        int key = itr.next();
        if (numToCount.get(key) &gt; maxLen) {
            maxLen = numToCount.get(key);
            majorityNum = key;
        }
    }

    return majorityNum;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Leetcode_Min Stack]]></title>
    <link href="http://smilevchy.github.io/blog/2015/01/15/leetcode-min-stack/"/>
    <updated>2015-01-15T10:04:07+08:00</updated>
    <id>http://smilevchy.github.io/blog/2015/01/15/leetcode-min-stack</id>
    <content type="html"><![CDATA[<p>原题链接: <a href="https://oj.leetcode.com/problems/min-stack/">https://oj.leetcode.com/problems/min-stack/</a></p>

<!-- more -->


<pre><code>class MinStack {
    private List&lt;Integer&gt; normalStack = new ArrayList&lt;Integer&gt;();
    private List&lt;Integer&gt; minNumStack = new ArrayList&lt;Integer&gt;();


    public void push(int x) {
        normalStack.add(x);

        if (minNumStack.isEmpty() || minNumStack.get(minNumStack.size() - 1) &gt;= x) {
            minNumStack.add(x);
        }
    }

    public void pop() {
        if (normalStack.isEmpty()) return;

        int x = normalStack.get(normalStack.size() - 1);
        normalStack.remove(normalStack.size() - 1);

        if (!minNumStack.isEmpty() &amp;&amp; x == minNumStack.get(minNumStack.size() - 1)) {
            minNumStack.remove(minNumStack.size() - 1);
        }
    }

    public int top() {
        if (normalStack.isEmpty()) return 0;

        return normalStack.get(normalStack.size() - 1);
    }

    public int getMin() {
        if (minNumStack.isEmpty()) return 0;

        return minNumStack.get(minNumStack.size() - 1);
    }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Something About Installing Genymotion]]></title>
    <link href="http://smilevchy.github.io/blog/2014/12/28/something-about-installing-genymotion/"/>
    <updated>2014-12-28T16:21:48+08:00</updated>
    <id>http://smilevchy.github.io/blog/2014/12/28/something-about-installing-genymotion</id>
    <content type="html"><![CDATA[<p>趁着有时间安装了 Genymotion，它需要依据 Oracle 的 VirtualBox 来工作，所以就是说你还需要安装 Oracle VM VirtualBox 这个软件。</p>

<p>一般设计上来说，Genymotion 应该要提供一个位置来设置指向 VirtualBox 软件路径的，可是找了它的安装目录、软件界面设置都没有发现这个位置，所以就是说，它可能是固定指向 VirtualBox 的。</p>

<p>即，需要按照它给定的固定路径来安装 VirtualBox ，不然就无法启动成功。至于那个固定路径是什么，可以去它的日志文件里查找，如果没什么改变的话，位置一般是在用户数据文件夹里，名字为 genymotion.log。通过查看它的错误日志，找到指向 VirtualBox 时发生错误的日志记录，那里就有写该固定路径。</p>

<p>这是我自己遇到的错误，因为在安装 Genymotion 前我就一直使用 VirtualBox ，而且是自定义路径。 &ndash;_-所以需要卸载重装，安装它的固定路径。</p>
]]></content>
  </entry>
  
</feed>
